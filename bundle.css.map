{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Explainer.svelte",
    "Opening.svelte",
    "Article.svelte",
    "otherHalf.svelte",
    "ActivationAnimator.svelte",
    "Activationview.svelte",
    "ConvolutionAnimator.svelte",
    "Convolutionview.svelte",
    "HyperparameterAnimator.svelte",
    "Hyperparameterview.svelte",
    "PoolAnimator.svelte",
    "Poolview.svelte",
    "Softmaxview.svelte",
    "Modal.svelte",
    "Overview.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Overview from './overview/Overview.svelte';\n  import { cnnStore } from './stores.js';\n\n  // Enum to control the displaying view\n  const View = {\n    OVERVIEW: 'overview',\n    LAYERVIEW: 'layerview',\n    DETAILVIEW: 'detailview'\n  };\n\n  let mainView = View.OVERVIEW;\n\n\n</script>\n\n<style>\n#explainer {\n  width: 100%;\n  padding: 0;\n  margin: auto;\n  /* outline: 1px solid var(--g-dark-gray); */\n}\n</style>\n\n<div id='explainer'>\n  <Overview />\n</div>",
    "<!-- <body>\r\n    <div class=\"hero-bg\">\r\n      <section class=\"top\">\r\n        <header>\r\n  \r\n           <a href=\"https://student.csc.liv.ac.uk/~sgzzhu20/comp208/\">AI INSIGHT</a>\r\n           <a href=\"https://jiawen006.github.io/CNN-Introduction/\">CNN INTRODUCTION</a>\r\n           <a href=\"https://student.csc.liv.ac.uk/~sgzzhu20/try/tryyourself.html\">CNN APPLICATION</a>\r\n           <a href=\"https://student.csc.liv.ac.uk/~sgzzhu20/comp208/discussion/\">DISCUSSION</a>\r\n        </header>\r\n\r\n         <h1><span>AI INSIGHT</span> A new approach to learning image processing algorithms </h1>\r\n\r\n         <p>    In machine learning, the classifier assigns class labels to a data point to identify the features it has.   </p>\r\n         <p> Since Convolutional Neural Networks (CNNs) have high accuracy, they are often used for image classification and recognition. This page will help you build a basic understanding of how CNN works. </p>  \r\n     <p><br>\r\n     <strong style=\"color:white\">First, </strong>let’s break down a CNN into its basic building blocks. </p>\r\n        </section>\r\n    </div>\r\n</body>\r\n\r\n\r\n<style>\r\n  @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@200;400&family=Nanum+Gothic&display=swap');\r\n\r\n/*Custom properties*/\r\n:root{\r\n    --leading:1.5em;\r\n}\r\n\r\n\r\nbody{\r\n    font-family: 'Montserrat', sans-serif;\r\n    margin: 0;\r\n}\r\n\r\n.hero-bg{ \r\n    background-image: url(\"https://1.cms.s81c.com/sites/default/files/2020-10-20/Learn%20Leadspace%201.jpg\");\r\n    background-size: cover;\r\n    color: white;\r\n    text-align: center;\r\n    padding-bottom: 1.7em;\r\n}\r\n\r\n/* header{\r\n    padding: 1em 0;\r\n} */\r\n\r\n.hero-bg a{\r\n    color:white;\r\n    text-decoration: none;\r\n    font-size: 1.2rem;/*Better to use rem on font*/\r\n}\r\n\r\n/* section{\r\n    margin: 0 1em;\r\n} */\r\n\r\nh1{\r\n    font-size: 2.5rem;\r\n    margin: 2em 0 1.2em;\r\n}\r\n\r\nh1 span{\r\n    text-transform: uppercase;\r\n    display: block;\r\n    font-size: 1.4rem;\r\n    position: relative; \r\n    z-index: 1;\r\n}\r\n\r\n\r\nh1 span::before{\r\n    content: ' ';\r\n    position: absolute;\r\n    width: 3em;\r\n    background: #2D7D98;\r\n    height: .4em;\r\n    bottom: 0;\r\n    z-index: -1;\r\n    margin-left: -.3em;\r\n}\r\n \r\n\r\np{\r\n    line-height:var(--leading);\r\n}\r\n\r\n@media(min-width: 730px){\r\n    section{\r\n        margin: 0 4em;\r\n    }\r\n  \r\n\r\n}\r\n\r\n@media(min-width: 930px){\r\n    .hero-bg{\r\n        text-align: left;\r\n    }\r\n    .hero-bg p{\r\n       font-weight: bold;\r\n       margin: 0 0 3em;\r\n    }\r\n    .hero-bg section{\r\n        width: 65%;\r\n    }\r\n\r\n}\r\n\r\n.hero-bg p {\r\n    margin-bottom: 0;\r\n  }\r\n\r\n.top{\r\n    animation : fadeIn 2s forwards; \r\n}\r\n\r\n@keyframes fadeIn{\r\n    from{\r\n       opacity: 0;\r\n       transform: translateY(-2em);\r\n\r\n    }\r\n    to{\r\n        opacity:1;\r\n        transform: translateY(0);\r\n    }\r\n}\r\n</style> -->\r\n\r\n\r\n    \r\n        <div class=\"navbar\">\r\n            <a href=\"https://student.csc.liv.ac.uk/~sgzzhu20/comp208/\">AI INSIGHT</a>\r\n            <span style=\"float:right;color:aqua\"> <a href=\"https://jiawen006.github.io/CNN-Introduction/\" >CNN INTRODUCTION</a></span>\r\n                <a href=\"https://student.csc.liv.ac.uk/~sgzzhu20/try/tryyourself.html\"  style=\"float:right;\">CNN APPLICATION</a>\r\n                 <a href=\"https://student.csc.liv.ac.uk/~sgzzhu20/comp208/discussion/\"  style=\"float:right;\">DISCUSSION</a>\r\n         </div>\r\n\r\n \r\n    <body>\r\n    <div class=\"hero-bg\"> \r\n      <section class=\"top\">\r\n       <h1><span>AI INSIGHT</span> A new approach to learning image processing algorithms </h1>\r\n\r\n         <p>    In machine learning, the classifier assigns class labels to a data point to identify the features it has.   </p>\r\n         <p> Since Convolutional Neural Networks (CNNs) have high accuracy, they are often used for image classification and recognition. This page will help you build a basic understanding of how CNN works. </p>  \r\n     <p><br>\r\n     <strong style=\"color:white\">First, </strong>let’s break down a CNN into its basic building blocks. </p>\r\n        </section>\r\n    </div>\r\n</body>\r\n\r\n\r\n<style>\r\n \r\n  @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@200;400&family=Nanum+Gothic&display=swap');\r\n  \r\n.container1 {  \r\n  display: grid;\r\n  grid-template-rows: 0.4fr 2.1fr 1.3fr;\r\n  grid-auto-columns: 1fr;\r\n  grid-auto-rows: 1fr;\r\n  gap: 20px 19px;\r\n  grid-auto-flow: row;\r\n  width: 1150px;\r\n  height: 1000px;\r\n  margin:auto\r\n}\r\n\r\n.app {  display: grid;\r\n  grid-template-columns: 1.2fr 0.7fr 1.2fr;\r\n  grid-template-rows: 0.1fr 2.9fr 0.1fr;\r\n  gap: 0px 0px;\r\n  grid-auto-flow: row;\r\n  grid-template-areas:\r\n    \". . .\"\r\n    \"drop botton process\"\r\n    \". . .\";\r\n  grid-area: 2 / 1 / 3 / 2;\r\n}\r\n\r\n.drop { grid-area: drop; }\r\n\r\n.process {   display: grid; \r\n  grid-template-columns: 1fr; \r\n  grid-template-rows: 0.2fr 1.2fr; \r\n  gap: 0px 0px; \r\n  grid-template-areas: \r\n    \"download\"\r\n    \"preview\"; \r\n  grid-area: process; \r\n}\r\n.download { grid-area: download; }\r\n.preview { grid-area: preview; }\r\n\r\n.botton {  display: grid;\r\n  grid-template-columns: 0.6fr 1.8fr 0.6fr;\r\n  grid-template-rows: 1.1fr 0.5fr 1.4fr;\r\n  gap: 0px 0px;\r\n  grid-auto-flow: row;\r\n  grid-template-areas:\r\n    \". . .\"\r\n    \". submit .\"\r\n    \". . .\";\r\n  grid-area: botton;\r\n\r\n}\r\n\r\n.submit { grid-area: submit; }\r\n\r\n.form-input {\r\n  width:1.2fr;\r\n  padding:10px;\r\n  align-items:center;\r\n  background:#fff;\r\n  box-shadow: -3px -3px 7px rgba(94, 104, 121, 0.377),\r\n              3px 3px 7px rgba(94, 104, 121, 0.377);\r\n}\r\n.form-input input {\r\n  display:none;\r\n\r\n}\r\n.form-input label {\r\n  display:block;\r\n  width:45%;\r\n  height:45px;\r\n  margin-left: 25%;\r\n  line-height:50px;\r\n  text-align:center;\r\n  background:#1172c2;\r\n\r\n  color:#fff;\r\n  font-size:15px;\r\n  font-family:\"Open Sans\",sans-serif;\r\n  text-transform:Uppercase;\r\n  font-weight:600;\r\n  border-radius:5px;\r\n  cursor:pointer;\r\n}\r\n\r\n.form-input img {\r\n  width:100%;\r\n  display:none;\r\n  \r\n  margin-bottom:10px;\r\n}\r\n\r\n/*a  upload */\r\n.a-upload {\r\n    padding: 4px 10px;\r\n    height: 40px;\r\n    line-height: 25px;\r\n    position: relative;\r\n    cursor: pointer;\r\n    color: #888;\r\n    background: #fafafa;\r\n    border: 1px solid #ddd;\r\n    border-radius: 4px;\r\n    overflow: hidden;\r\n    display: inline-block;\r\n    *display: inline;\r\n    *zoom: 1\r\n}\r\n\r\n.a-upload  input {\r\n    position: absolute;\r\n    font-size: 100px;\r\n    right: 0;\r\n    top: 0;\r\n    opacity: 0;\r\n    \r\n    cursor: pointer\r\n}\r\n\r\n.a-upload:hover {\r\n    color: #444;\r\n    background: #eee;\r\n    border-color: #ccc;\r\n    text-decoration: none\r\n}\r\n\r\n.stitched {\r\n    padding: 10px;\r\n    margin: 20px 10px 0px 10px;\r\n    background: #ffffff;\r\n    color: #222222;\r\n    font-size: 15x;\r\n    font-weight: bold;\r\n    line-height: 1em;\r\n    box-shadow: 0 0 0 4px #ffffff, 2px 1px 6px 4px rgb(10 10 0 / 50%);\r\n    font-weight: normal;\r\n    \r\n}\r\n\r\n.button {\r\n    margin: 5px;\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    border: 0;\r\n    background: transparent;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n  .hero-bg {\r\n  padding: 16px;\r\n  margin-bottom: 30px;\r\n  /* height: 1500px; Used in this example to enable scrolling */\r\n}\r\n \r\n  .navbar {\r\n  overflow: hidden;\r\n  background-color: black;\r\n  position: fixed;\r\n  top: 0;\r\n  width: 100%;\r\n}\r\n\r\n.navbar a {\r\n  float: left;\r\n  display: block;\r\n  color: #f2f2f2;\r\n  text-align: center;\r\n  padding: 14px 16px;\r\n  text-decoration: none;\r\n  font-size: 17px; \r\n}\r\n\r\n.navbar a:hover {\r\n  background: #ddd;\r\n  color: black;\r\n}\r\n.navbar span{\r\n    float:right;\r\n}\r\n\r\n:root{\r\n    -leading:1.5em;\r\n}\r\n\r\n\r\nbody{\r\n    font-family: 'Montserrat', sans-serif;\r\n    margin: 0;\r\n}\r\n\r\n.hero-bg{ \r\n    margin-top: 0;\r\n    background-image: url(\"https://1.cms.s81c.com/sites/default/files/2020-10-20/Learn%20Leadspace%201.jpg\");\r\n    background-size: cover;\r\n    color: white;\r\n    text-align: center;\r\n    padding-bottom: 1.7em;\r\n}\r\n\r\n/* header{\r\n    padding: 1em 0;\r\n} */\r\n\r\n\r\n/* section{\r\n    margin: 0 1em;\r\n} */\r\n\r\n\r\nh1{\r\n    font-size: 2.5rem;\r\n    margin: 2em 0 1.2em;\r\n}\r\n\r\nh1 span{\r\n    text-transform: uppercase;\r\n    display: block;\r\n    font-size: 1.4rem;\r\n    position: relative; \r\n    z-index: 1;\r\n}\r\n\r\n\r\nh1 span::before{\r\n    content: ' ';\r\n    position: absolute;\r\n    width: 3em;\r\n    background: #2D7D98;\r\n    height: .4em;\r\n    bottom: 0;\r\n    z-index: -1;\r\n    margin-left: -.3em;\r\n}\r\n \r\n\r\np{\r\n    line-height:var(--leading);\r\n}\r\n\r\n@media(min-width: 730px){\r\n    section{\r\n        margin: 0 4em;\r\n    }\r\n  \r\n\r\n}\r\n\r\n@media(min-width: 730px){\r\n    .hero-bg{\r\n        text-align: left;\r\n    }\r\n    .hero-bg p{\r\n       font-weight: bold;\r\n       margin: 0 0 3em;\r\n    }\r\n    .hero-bg section{\r\n        width: 65%;\r\n    }\r\n\r\n}\r\n\r\n.hero-bg p {\r\n    margin-bottom: 0;\r\n  }\r\n\r\n.top{\r\n    animation : fadeIn 2s forwards; \r\n}\r\n\r\n@keyframes fadeIn{\r\n    from{\r\n       opacity: 0;\r\n       transform: translateY(-2em);\r\n\r\n    }\r\n    to{\r\n        opacity:1;\r\n        transform: translateY(0);\r\n    }\r\n}\r\n</style>",
    "<script>\n  import HyperparameterView from \"../detail-view/Hyperparameterview.svelte\";\n\n  let softmaxEquation = `$$\\\\text{Softmax}(x_{i}) = \\\\frac{\\\\exp(x_i)}{\\\\sum_j \\\\exp(x_j)}$$`;\n  let reluEquation = `$$\\\\text{ReLU}(x) = \\\\max(0,x)$$`;\n</script>\n\n<body>\n  <div id=\"description\">\n    <h2>What is a Convolutional Neural Network?</h2>\n    <p>\n      A CNN is a neural network: an algorithm used to recognize patterns in\n      data. Neural Networks in general are composed of a collection of neurons\n      that are organized in layers, each with their own learnable weights and\n      biases.\n    </p>\n    <ol>\n      <li>\n        A <strong>tensor</strong> can be thought of as an n-dimensional matrix. In\n        the CNN above, tensors will be 3-dimensional with the exception of the output\n        layer.\n      </li>\n      <li>\n        A <strong>neuron</strong> can be thought of as a function that takes in\n        multiple inputs and yields a single output. The outputs of neurons are\n        represented above as the <span style=\"color:#FF7577;\">red</span> &rarr;\n        <span style=\"color:#60A7D7;\">blue</span>\n        <strong>activation maps</strong>.\n      </li>\n      <li>\n        A <strong>layer</strong> is simply a collection of neurons with the same\n        operation, including the same hyperparameters.\n      </li>\n      <li>\n        <strong>Kernel weights and biases</strong>, while unique to each neuron,\n        are tuned during the training phase, and allow the classifier to adapt\n        to the problem and dataset provided. They are encoded in the\n        visualization with a <span style=\"color:#BC8435;\">yellow</span> &rarr;\n        <span style=\"color:#39988F;\">green</span>\n        diverging colorscale. The specific values can be viewed in the\n        <em>Interactive Formula View</em>\n        by clicking a neuron or by hovering over the kernel/bias in the\n        <em>Convolutional Elastic Explanation View</em>.\n      </li>\n      <li>\n        A CNN conveys a <strong>differentiable score function</strong>, which is\n        represented as <strong>class scores</strong> in the visualization on the\n        output layer.\n      </li>\n    </ol>\n  </div>\n\n  <div id=\"description\">\n    <h2>0. Input layer</h2>\n    <p>\n      The input layer represents the input image into the CNN. In image\n      processing and classification, RGB images are used as input, the input\n      layer has three channels, corresponding to the red, green, and blue\n      channels, respectively, which are shown in this layer.\n    </p>\n    <p style=\"text-align: center;\">\n      <img\n        src=\"assets/figures/rgb.png\"\n        alt=\"clicking on topmost first conv. layer activation map\"\n        width=\"30%\"\n        height=\"30%\"\n        align=\"middle\"\n      />\n    </p>\n    <div class=\"figure-caption\" style=\"text-align: center;\">\n      Figure 1. This is an example of a numerical representation <a\n        href=\"https://towardsdatascience.com/classify-butterfly-images-with-deep-learning-in-keras-b3101fe0f98\"\n        title=\"See Input Layer section\">empirically observed</a\n      > of a 7x7 RGB image.\n    </div>\n\n    <h2>1. Convolutional Layer</h2>\n    <p>\n      This is the first layer to extract various features from the input images.\n      In this layer, the mathematical operation of convolution is performed\n      between the input image and a kernal of a particular size, take MxM as an\n      example. By sliding the filter over the input image, the dot product is\n      taken between the filter and the parts of the input image with respect to\n      the size of the filter (MxM). The output is termed as the feature map\n      which gives us information about the image such as the corners and edges.\n      Later, this feature map is fed to other layers to learn several other\n      features of the input image.\n    </p>\n    <p style=\"text-align: center;\">\n      <img\n        src=\"assets/figures/convlayer_detailedview_demo.gif\"\n        alt=\"clicking on topmost first conv. layer activation map\"\n        width=\"30%\"\n        height=\"30%\"\n        align=\"middle\"\n      />\n    </p>\n    <div class=\"figure-caption\" style=\"text-align: center;\">\n      Figure 2. The kernel being applied to yield the topmost intermediate\n      result for the discussed activation map.\n    </div>\n\n    <!-- 中间的间隔很奇怪 -->\n\n    <h2>2. Pooling Layer</h2>\n    <p>\n      In most cases, a Convolutional Layer is followed by a Pooling Layer. The\n      primary aim of this layer is to decrease the size of the convolved feature\n      map to reduce the computational costs. In Max Pooling, the largest element\n      is taken from feature map. Average Pooling calculates the average of the\n      elements in a predefined sized Image section. The total sum of the\n      elements in the predefined section is computed in Sum Pooling. The Pooling\n      Layer usually serves as a bridge between the Convolutional Layer and the\n      Fully Connected Layer.\n    </p>\n    <p style=\"text-align: center;\">\n      <img\n        src=\"assets/figures/pooling.png\"\n        alt=\"This is the pooling demo pic\"\n        width=\"40%\"\n        height=\"40%\"\n        align=\"middle\"\n      />\n    </p>\n    <div class=\"figure-caption\" style=\"text-align: center;\">\n      Figure 3. Example <a\n        href=\"https://arxiv.org/pdf/1906.01975.pdf\"\n        title=\"See page 29\">Pooling Operation</a\n      >\n    </div>\n\n    <p>\n      To learn in detail how the convolution layer works, we will see what role\n      does hyperparameter play in CNN. You can explore the possible outputs\n      using the <strong>following section.</strong>\n    </p>\n\n    <h4>Try it out</h4>\n    <p>\n      <HyperparameterView />\n    </p>\n    <ol>\n      <li>\n        <strong>Input size</strong> could be denoted as an n* n matrix. Particularly,\n        it could be the value on each pixel in image processing.\n      </li>\n      <li>\n        <strong>Padding</strong> is often necessary when the kernel extends beyond\n        the activation map. Padding conserves data at the borders of activation maps,\n        and it can help preserve the input's spatial size.\n      </li>\n      <li>\n        <strong>Kernel size</strong> often also referred to as filter size, refers\n        to the dimensions of the sliding window over the input. Choosing this hyperparameter\n        has a massive impact on the image classification task.\n      </li>\n      <li>\n        <strong>Stride</strong> indicates how many pixels the kernel should be shifted\n        over at a time. As stride is decreased, more features are learned because\n        more data is extracted.\n      </li>\n    </ol>\n\n    <h2>3. Fully Connected Layer</h2>\n    <p>\n      The Fully Connected layer consists of the weights and biases along with\n      the neurons and is used to connect the neurons between two different\n      layers. These layers are usually placed before the output layer and form\n      the last few layers of a CNN Architecture. In this, the input image from\n      the previous layers are flattened and fed to the Fully Connected layer.\n      The flattened vector then undergoes few more FC layers where the\n      mathematical functions operations usually take place. In this stage, the\n      classification process begins to take place.\n    </p>\n    <!-- svelte-ignore a11y-img-redundant-alt -->\n    <p style=\"text-align: center;\">\n      <img\n        src=\"assets/figures/fcl.png\"\n        alt=\"This is a Fully Connected Layer demo image.\"\n        width=\"15%\"\n        height=\"15%\"\n      />\n    </p>\n\n    <div class=\"figure-caption\" style=\"text-align: center;\">\n      Figure 3. Image from previous layers fed to Fully Connected Layer.\n    </div>\n\n    <p>\n      The previous parts have shown the importance of CNN and how it can help\n      people in demanding requests. However, sometimes the output can’t be\n      simply expressed by a linear combination of the inputs. This is when\n      Activation function comes in handy.\n    </p>\n    <h2><span>4. Activation</span> Functions</h2>\n\n    <h6 id=\"article-relu\">ReLU</h6>\n    <p>\n      While most of the functions are linear, there do exist some categories\n      that can’t be expressed by a simple linear combination of the inputs.\n      Rectified Linear Activation function (ReLU) is a good solution for these\n      kind of problems. To be specific, ReLU provides non-linearity, and it is\n      the most common of activation functions.\n    </p>\n\n    <div class=\"figure\" style=\"text-align: center;\">\n      <!-- svelte-ignore a11y-img-redundant-alt -->\n      <img\n        src=\"assets/figures/relu.png\"\n        alt=\"ReLU image.\"\n        width=\"30%\"\n        height=\"30%\"\n        align=\"middle\"\n      />\n      <div class=\"figure-caption\" style=\"text-align: center;\">\n        Figure 5. The ReLU activation function graphed.\n      </div>\n    </div>\n    <p>\n      ReLU has a derivative of either 0 or 1, depending on whether the input is\n      negative or not. It means in fact that calculating the gradient of a\n      neuron is computationally inexpensive. Thus CNNs using ReLU are much\n      faster to train than other counterparts. The usage of ReLU helps to\n      prevent the exponential growth in the computation required to operate the\n      neural network. If the CNN scales in size, the computational cost of\n      adding extra ReLUs grows linearly.\n    </p>\n    <p>\n      ReLU is performed after every convolutional layer in the interactive\n      network, by <strong>clicking ReLU</strong> in the below graph, you can observe\n      the impact it has on the activation map.\n    </p>\n\n    <h6 id=\"article-softmax\">Softmax</h6>\n    <p>\n      Softmax Layer is the last layer of CNN. It resides at the end of Fully\n      Connected Layer. Softmax is a mathematical function that converts the\n      model outputs into probabilities, where the probabilities of each value\n      are proportional to the relative scale of each value in the vector.\n      {softmaxEquation}\n    </p>\n    <p>\n      Softmax outputs sum to 1 also makes great probability analysis. Softmax\n      output is large if the score (input called logit) is large. Its output is\n      small if the score is small. The proportion is not uniform. Softmax is\n      exponential and enlarges differences - push one result closer to 1 while\n      another closer to 0. It is more beneficial comparing to standard\n      normalization because instead of solely giving a maximum value, Softmax\n      assigns each output classification with a probability value, indicating\n      the likelihood of the output belonging to that category.\n    </p>\n\n    <h2><span>5. Tiny VGG: A model example</span></h2>\n\n    <p>Here, we will introduce a simple but classical CNN model.</p>\n    <p>\n      In 2016, the tiny VGG architecture was introduced in a research paper\n      titled “CNN EXPLAINER: Learning Convolutional Neural Networks with\n      Interactive Visualization ” by Wang et al. It is one of the most basic CNN\n      architectures for machine learning beginners.\n    </p>\n    <p>\n      It consists of 4 units and one softmax function. The first unit has a\n      layer that consists of an input image with dimensions of 64×64. It is\n      convolved with 10 filters of size 3×3 resulting in the dimension of\n      62x62x10. Then it uses a relu activation function to generate the output\n      of the first layer.\n    </p>\n    <p>\n      The second unit consists of a 3×3 convolutional layer and the activation\n      relu function, with the max pooling function of the stride 2. Hence the\n      resulting image dimension will be 30×30×10.\n    </p>\n    <p>\n      Similarly, the third unit involves a convolution the same as the first\n      unit followed by the fourth unit with a similar filter size of 3×3 and\n      stride of 2. Thus, the resulting image dimension will be reduced to\n      13x13x10.\n    </p>\n    <p>\n      Once the image dimension is reduced, the fifth unit is a fully connected\n      layer to the final softmax output layer with n possible classes depending\n      upon the number of classes in the dataset, in this scenario n = 10.\n    </p>\n    <p>\n      The following graph is the visualization of the tiny VGG model. You can\n      click the button on the screen to interact. Detail instrcution is shown\n      below the graph.\n    </p>\n\n    <p style=\"text-align: center;\">\n      <!-- <img\n    src=\"assets/figures/sfm.gif\"\n    alt=\"Softmax gif\"\n    width=\"50%\"\n    height=\"50%\"\n    align = \"middle\"\n  /> \n</p>\n  <div class=\"figure-caption\" style=\"text-align: center;\">\n    Figure 4. The Softmax Interactive Formula View allows a user to interact with both the color encoded logits and formula.\n  </div>-->\n    </p>\n  </div>\n</body>\n\n<style>\n  #description {\n    margin-bottom: 60px;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 100ch;\n  }\n  #description h2 {\n    color: #444;\n    font-size: 32px;\n    font-weight: 450;\n    margin-bottom: 12px;\n    margin-top: 60px;\n  }\n  #description h4 {\n    color: #444;\n    font-size: 25px;\n    font-weight: 450;\n    margin-bottom: 8px;\n    margin-top: 44px;\n  }\n  #description h6 {\n    color: #444;\n    font-size: 24px;\n    font-weight: 450;\n    margin-bottom: 8px;\n    margin-top: 44px;\n  }\n  #description p {\n    margin: 16px 0;\n  }\n  #description p img {\n    vertical-align: middle;\n  }\n  #description .figure-caption {\n    font-size: 13px;\n    margin-top: 5px;\n  }\n  #description ol {\n    margin-left: 40px;\n  }\n  #description p,\n  #description div,\n  #description li {\n    color: #555;\n    font-size: 17px;\n    line-height: 1.6;\n  }\n  #description small {\n    font-size: 12px;\n  }\n  #description ol li img {\n    vertical-align: middle;\n  }\n  #description .video-link {\n    color: #3273dc;\n    cursor: pointer;\n    font-weight: normal;\n    text-decoration: none;\n  }\n  #description ul {\n    list-style-type: disc;\n    margin-top: -10px;\n    margin-left: 40px;\n    margin-bottom: 15px;\n  }\n\n  #description a:hover,\n  #description .video-link:hover {\n    text-decoration: underline;\n  }\n  section.try-it-out {\n    display: grid;\n    grid-template-columns: repeat(2, 50%);\n    grid-template-areas: \"CNN content\";\n    /*margin-top: 100px;\n     margin-left:35px;\n    margin-right:15px; */\n  }\n\n  /*Hyperparameter view, margin*/\n  #hyper {\n    margin-bottom: 60px;\n    margin-top: 40px;\n    margin-left: -25px;\n    margin-right: -15px;\n    grid-area: auto;\n    text-align: auto;\n    align-self: auto;\n  }\n\n  /*TRY IT OUT, margin*/\n  .right-col {\n    margin-left: 35px;\n    margin-right: 10px;\n  }\n\n  /* #description {\n    margin-bottom: 30px;\n    margin-left: 60px;\n    margin-right: 60px;\n    /* max-width: 120ch; \n  }\n\n  #description h2 {\n    color: #444;\n    font-size: 32px;\n    font-weight: 450;\n    margin-bottom: 10px;\n    margin-top: 20px;\n  }\n\n  #description h4 {\n    color: #444;\n    font-size: 32px;\n    font-weight: 450;\n    margin-bottom: 8px;\n    margin-top: 44px;\n  }\n\n  #description h6 {\n    color: #444;\n    font-size: 24px;\n    font-weight: 450;\n    margin-bottom: 8px;\n    margin-top: 44px;\n  }\n\n  #description p {\n    margin: 16px 0;\n  }\n\n  #description p img {\n\n    vertical-align: middle;\n  }\n\n  #description .figure-caption {\n    font-size: 15px;\n    margin-top: 15px;\n    margin-bottom: 15px;\n  }\n  \n\n  #description ol {\n    margin-left: 40px;\n  }\n */\n\n  h2 {\n    text-transform: uppercase;\n    position: relative;\n  }\n\n  h2::before {\n    content: \" \";\n    position: absolute;\n    width: 2.5em;\n    background: #00bfff;\n    height: 0.4em;\n    bottom: 0;\n    z-index: -1;\n    margin-left: -0.3em;\n  }\n\n  h4 {\n    text-transform: uppercase;\n    position: relative;\n  }\n\n  h4::before {\n    content: \" \";\n    position: absolute;\n    width: 2.5em;\n    background: #00bfff;\n    height: 0.4em;\n    bottom: 0;\n    z-index: -1;\n    margin-left: -0.3em;\n  }\n\n  #description p,\n  #description div,\n  #description li {\n    color: #555;\n    font-size: 17px;\n    line-height: 1.6;\n  }\n\n  #description ol li img {\n    vertical-align: middle;\n  }\n\n  #description a:hover,\n  .figure {\n    margin-top: auto;\n    margin-left: AUTO;\n    margin-right: auto;\n    align-content: auto;\n  }\n</style>\n",
    "<script>\r\nimport Youtube from \"./Youtube.svelte\";\r\nlet currentPlayer;\r\n</script>\r\n\r\n<body>\r\n    <div id=\"description\">\r\n        <h2>Interactive features</h2>\r\n        <ol>\r\n          <li>\r\n            <strong>Upload your own image</strong> by selecting\r\n            <img\r\n              class=\"icon is-rounded\"\r\n              src=\"PUBLIC_URL/assets/figures/upload_image_icon.png\"\r\n              alt=\"upload image icon\"\r\n              width=\"12%\"\r\n              height=\"12%\"\r\n            /> to understand how your image is classified into the 10 classes. By analyzing\r\n            the neurons throughout the network, you can understand the activations maps\r\n            and extracted features.\r\n          </li>\r\n          <li>\r\n            <strong>Change the activation map colorscale</strong> to better\r\n            understand the impact of activations at different levels of abstraction\r\n            by adjusting\r\n            <img\r\n              class=\"is-rounded\"\r\n              width=\"9%\"\r\n              height=\"9%\"\r\n              src=\"PUBLIC_URL/assets/figures/heatmap_scale.png\"\r\n              alt=\"heatmap\"\r\n            />.\r\n          </li>\r\n          <li>\r\n            <strong>Understand network details</strong> such as layer dimensions and\r\n            colorscales by clicking the\r\n            <img\r\n              class=\"is-rounded\"\r\n              width=\"10%\"\r\n              height=\"10%\"\r\n              src=\"PUBLIC_URL/assets/figures/network_details.png\"\r\n              alt=\"network details icon\"\r\n            /> icon.\r\n          </li>\r\n          <li>\r\n            <strong>Simulate network operations</strong> by clicking the\r\n            <img\r\n              class=\"icon is-rounded\"\r\n              src=\"PUBLIC_URL/assets/figures/play_button.png\"\r\n              alt=\"play icon\"\r\n              width=\"12%\"\r\n              height=\"12%\"\r\n            />\r\n            button or interact with the layer slice in the\r\n            <em>Interactive Formula View</em> by hovering over portions of the input\r\n            or output to understand the mappings and underlying operations.\r\n          </li>\r\n          <li>\r\n            <strong>Learn layer functions</strong> by clicking\r\n            <img\r\n              class=\"icon is-rounded\"\r\n              src=\"PUBLIC_URL/assets/figures/info_button.png\"\r\n              alt=\"info icon\"\r\n              width=\"12%\"\r\n              height=\"12%\"\r\n            />\r\n            from the <em>Interactive Formula View</em> to read layer details from the\r\n            article.\r\n          </li>\r\n        </ol>\r\n    \r\n    \r\n        <h2>Video Tutorial</h2>\r\n        <ul>\r\n         <!-- 一个小段 -->\r\n        <!--  <li class=\"video-link\" on:click={currentPlayer.play(0)}>\r\n            Introduction to Convolutional Neural Network\r\n            <small>(0:00-8:46)</small>\r\n          </li>\r\n    \r\n          <li class=\"video-link\" on:click={currentPlayer.play(27)}>\r\n            <em>Pooling Layer</em>\r\n            <small>(8:46-10:32)</small>\r\n          </li>\r\n    \r\n          <li class=\"video-link\" on:click={currentPlayer.play(37)}>\r\n            <em>ReLU Activation Function</em>\r\n            <small>(10:32-12:31)</small>\r\n          </li>\r\n          <li class=\"video-link\" on:click={currentPlayer.play(46)}>\r\n         <em>Fully Connected Layer</em>\r\n            <small>(12:31-16:25)</small>\r\n          </li>\r\n          <li class=\"video-link\" on:click={currentPlayer.play(82)}>\r\n            <em>Other fundational knowledge</em>\r\n            <small>(16:25-31:32)</small>\r\n          </li>\r\n         <li class=\"video-link\" on:click={currentPlayer.play(101)}>\r\n            <em>An example</em>\r\n            <small>(31:32-46:06)</small>\r\n          </li>\r\n            <li class=\"video-link\" on:click={currentPlayer.play(126)}>\r\n            Engaging Learning Experience: Understanding Classification\r\n            <small>(2:06-2:28)</small>\r\n          </li>\r\n          <li class=\"video-link\" on:click={currentPlayer.play(149)}>\r\n            Interactive Tutorial Article\r\n            <small>(2:29-2:54)</small> \r\n          </li>\r\n        </ul>-->\r\n        <br>\r\n        <div class=\"video\">\r\n          <Youtube\r\n            videoId=\"JB8T_zN7ZC0\" \r\n            playerId=\"Machine Learning introduction\"\r\n            bind:this={currentPlayer}\r\n          />\r\n        </div>\r\n    </div>\r\n\r\n    <body>\r\n      <div class=\"footer\">\r\n          <p>Copyright ©2022 AI INSIGHT . All rights reserved. Inspired by <a href=\"https://arxiv.org/pdf/2004.15004.pdf\">Zijie J. Wang</a></p>\r\n        </div>\r\n  </body>\r\n\r\n \r\n</body>\r\n\r\n<style>\r\n/* .footer {\r\n     position: relative;\r\n     bottom: 0;\r\n     width: 100%;\r\n     height: 5px;\r\n     background-color: Black;\r\n     color: white;\r\n     text-align: center;\r\n     margin: 0px 0px 0px 0px;\r\n  } */\r\n\r\n  \r\n .footer {\r\n   position:relative;\r\n    background: black;\r\n    height: 80px;\r\n    width:100%;\r\n    color: white;\r\n    text-align: center;\r\n    padding: 20px;\r\n}\r\n  /* body{\r\n      font-family: 'Montserrat', sans-serif;\r\n      margin: 0;\r\n  } */\r\n  #description {\r\n    margin-bottom: 60px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    max-width: 100ch;\r\n  }\r\n  #description h2 {\r\n    color: #444;\r\n    font-size: 32px;\r\n    font-weight: 450;\r\n    margin-bottom: 12px;\r\n    margin-top: 60px;\r\n  }\r\n\r\n  #description p img {\r\n    vertical-align: middle;\r\n  }\r\n\r\n  #description ol {\r\n    margin-left: 40px;\r\n  }\r\n \r\n  #description div,\r\n  #description li {\r\n    color: #555;\r\n    font-size: 17px;\r\n    line-height: 1.6;\r\n  }\r\n\r\n  #description ol li img {\r\n    vertical-align: middle;\r\n  }\r\n\r\n  #description ul {\r\n      list-style-type: disc;\r\n      margin-top: -10px;\r\n      margin-left: 40px;\r\n      margin-bottom: 15px;\r\n  }\r\n    \r\n\r\n    \r\n      h2{\r\n        text-transform: uppercase;\r\n        position: relative;\r\n    }\r\n    \r\n    h2::before{\r\n        content: ' ';\r\n        position: absolute;\r\n        width: 2.5em;\r\n        background: #00bfff;\r\n        height: .4em;\r\n        bottom: 0;\r\n        z-index: -1;\r\n        margin-left: -.3em;\r\n    }\r\n    \r\n\r\n      #description div,\r\n      #description li {\r\n        color: #555;\r\n        font-size: 17px;\r\n        line-height: 1.6;\r\n      }\r\n    \r\n \r\n    \r\n      #description ol li img {\r\n        vertical-align: middle;\r\n      }\r\n    \r\n      #description ul {\r\n        list-style-type: disc;\r\n        margin-top: -10px;\r\n        margin-left: 40px;\r\n        margin-bottom: 15px;\r\n      }\r\n    \r\n\r\n    \r\n      .video {\r\n        width: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n      }\r\n    </style>",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { array1d, getMatrixSliceFromOutputHighlights,\n    getVisualizationSizeConstraint, getMatrixSliceFromInputHighlights, gridData\n  } from './DetailviewUtils.js';\n  import Dataview from './Dataview.svelte';\n\n  export let image;\n  export let output;\n  export let isPaused;\n  export let dataRange;\n\n  const dispatch = createEventDispatcher();\n  const padding = 0;\n  let padded_input_size = image.length + padding * 2;\n  $: padded_input_size = image.length + padding * 2;\n\n  let gridInputMatrixSlice = gridData([[0]]);\n  let gridOutputMatrixSlice = gridData([[0]]);\n  let inputHighlights = array1d(image.length * image.length, (i) => true);\n  let outputHighlights = array1d(output.length * output.length, (i) => true);\n  let interval;\n  $ : {\n    let inputHighlights = array1d(image.length * image.length, (i) => true);\n    let outputHighlights = array1d(output.length * output.length, (i) => true);\n    let interval;\n  }\n\n  let counter;\n\n  // lots of replication between mouseover and start-relu. TODO: fix this.\n  function startRelu() {\n    counter = 0;\n    if (interval) clearInterval(interval);\n    interval = setInterval(() => {\n      if (isPaused) return;\n      const flat_animated = counter % (output.length * output.length);\n      outputHighlights = array1d(output.length * output.length, (i) => false);\n      inputHighlights = array1d(image.length * image.length, (i) => undefined);\n      const animatedH = Math.floor(flat_animated / output.length);\n      const animatedW = flat_animated % output.length;\n      outputHighlights[animatedH * output.length + animatedW] = true;\n      inputHighlights[animatedH * output.length + animatedW] = true;\n      const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, 1);\n      gridInputMatrixSlice = gridData(inputMatrixSlice);\n      const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n      gridOutputMatrixSlice = gridData(outputMatrixSlice);\n      counter++;\n    }, 250)\n  }\n\n  function handleMouseover(event) {\n    outputHighlights = array1d(output.length * output.length, (i) => false);\n    const animatedH = event.detail.hoverH;\n    const animatedW = event.detail.hoverW;\n    outputHighlights[animatedH * output.length + animatedW] = true;\n    inputHighlights = array1d(image.length * image.length, (i) => undefined);\n    inputHighlights[animatedH * output.length + animatedW] = true;\n    const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, 1);\n    gridInputMatrixSlice = gridData(inputMatrixSlice);\n    const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n    gridOutputMatrixSlice = gridData(outputMatrixSlice);\n    isPaused = true;\n    dispatch('message', {\n      text: isPaused\n    });\n  }\n\n  startRelu();\n  let gridImage = gridData(image)\n  let gridOutput = gridData(output)\n  $ : {\n    startRelu();\n    gridImage = gridData(image)\n    gridOutput = gridData(output)\n  }\n</script>\n\n<style>\n  .column {\n    padding: 5px;\n  }\n</style>\n\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    Input ({image.length}, {image[0].length})\n  </div>\n  <Dataview on:message={handleMouseover} data={gridImage} highlights={inputHighlights} outputLength={output.length}\n      isKernelMath={false} constraint={getVisualizationSizeConstraint(image.length)} dataRange={dataRange} stride={1}/>  \n</div>\n<div class=\"column has-text-centered\">\n  <span>\n    max(\n    <Dataview data={gridData([[0]])} highlights={outputHighlights} isKernelMath={true} \n    constraint={20} dataRange={dataRange}/>\n    ,\n    <Dataview data={gridInputMatrixSlice} highlights={outputHighlights} isKernelMath={true} \n    constraint={20} dataRange={dataRange}/>\n    )\n    =\n    <Dataview data={gridOutputMatrixSlice} highlights={outputHighlights} isKernelMath={true} \n      constraint={20} dataRange={dataRange}/>\n  </span> \n</div>\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    Output ({output.length}, {output[0].length})\n  </div>\n  <Dataview on:message={handleMouseover} data={gridOutput} highlights={outputHighlights} isKernelMath={false} \n      outputLength={output.length} constraint={getVisualizationSizeConstraint(output.length)} dataRange={dataRange} stride={1}/>\n</div>",
    "<script>\n\timport ActivationAnimator from './ActivationAnimator.svelte';\n  import { createEventDispatcher } from 'svelte';\n\n  export let input;\n  export let output;\n  export let dataRange;\n  export let isExited;\n\n  const dispatch = createEventDispatcher();\n  let isPaused = false;\n  \n  function handleClickPause() {\n    isPaused = !isPaused;\n  }\n\n  function handlePauseFromInteraction(event) {\n    isPaused = event.detail.text;\n  }\n\n  function handleClickX() {\n    dispatch('message', {\n      text: true\n    });\n  }\n\n  function handleScroll() {\n    let svgHeight = Number(d3.select('#cnn-svg').style('height').replace('px', '')) + 150;\n    let scroll = new SmoothScroll('a[href*=\"#\"]', {offset: -svgHeight});\n    let anchor = document.querySelector(`#article-relu`);\n    scroll.animateScroll(anchor);\n  }\n</script>\n\n<style>\n  .control-pannel {\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .buttons {\n    cursor: pointer;\n    position: absolute;\n    top: 0px;\n    right: 0px;\n  }\n\n  .control-button {\n    color: gray;\n    font-size: 15px;\n    opacity: 0.4;\n    cursor: pointer;\n  }\n\n  .control-button:not(:first-child) {\n    margin-left: 5px;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-left : 10px;\n    font-size: 12px;\n  }\n\n  .annotation > img {\n    width: 17px;\n    margin-right: 5px;\n  }\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .box {\n    padding: 5px 15px 10px 15px;\n  }\n\n  .container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  .title-text {\n    font-size: 1.2em;\n    font-weight: 500;\n    color: #4a4a4a;\n  }\n</style>\n\n{#if !isExited}\n  <div class=\"container\">\n    <div class=\"box\">\n\n      <div class=\"control-pannel\">\n\n        <div class=\"title-text\">\n          ReLU Activation\n        </div>\n\n        <div class=\"buttons\">\n\n          <div class=\"control-button\" on:click={handleScroll} title=\"Jump to article section\">\n            <i class=\"fas fa-info-circle\"></i>\n          </div>\n\n          <div class=\"play-button control-button\" on:click={handleClickPause} title=\"Play animation\">\n            {@html isPaused ?\n              '<i class=\"fas fa-play-circle play-icon\"></i>' :\n              '<i class=\"fas fa-pause-circle\"></i>'}\n          </div>\n\n          <div class=\"delete-button control-button\" on:click={handleClickX} title=\"Close\">\n              <i class=\"fas control-icon fa-times-circle\"></i>\n          </div>\n        </div>\n\n      </div>\n\n      <div class=\"container is-centered is-vcentered\">\n        <ActivationAnimator on:message={handlePauseFromInteraction} \n          image={input} output={output} isPaused={isPaused}\n          dataRange={dataRange}/>\n      </div>\n\n      <div class=\"annotation\">\n        <img src='PUBLIC_URL/assets/img/pointer.svg' alt='pointer icon'>\n        <div class=\"annotation-text\">\n          <span style=\"font-weight:600\">Hover over</span> the matrices to change pixel.\n        </div>\n      </div>\n\n    </div>\n  </div>\n{/if}",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { array1d, getMatrixSliceFromOutputHighlights,\n    compute_input_multiplies_with_weight, getDataRange,\n    getVisualizationSizeConstraint, generateOutputMappings,\n    getMatrixSliceFromInputHighlights, gridData\n  } from './DetailviewUtils.js';\n  import Dataview from './Dataview.svelte';\n  import KernelMathView from './KernelMathView.svelte';\n  // image: nxn array -- prepadded.\n  // kernel: mxm array.\n  // stride: int\n  export let stride;\n  export let dilation\n  export let kernel;\n  export let image;\n  export let output;\n  export let isPaused;\n  export let dataRange;\n  export let colorScale;\n  export let isInputInputLayer = false;\n\n  const dispatch = createEventDispatcher();\n  const padding = 0;\n  let padded_input_size = image.length + padding * 2;\n  $: padded_input_size = image.length + padding * 2;\n\n  // Dummy data for original state of component.\n  let testInputMatrixSlice = [];\n  for (let i = 0; i < kernel.length; i++) {\n    testInputMatrixSlice.push([]);\n    for (let j = 0; j < kernel.length; j++) {\n      testInputMatrixSlice[i].push(0)\n    }\n  }\n  testInputMatrixSlice = gridData(testInputMatrixSlice)\n  let testOutputMatrixSlice = gridData([0]);\n\n  let inputHighlights = [];\n  let outputHighlights = array1d(output.length * output.length, (i) => true);\n  let interval;\n  $ : {\n    let inputHighlights = [];\n    let outputHighlights = array1d(output.length * output.length, (i) => true);\n    let interval;\n  }\n\n  let counter;\n  // lots of replication between mouseover and start-conv. TODO: fix this.\n  function startConvolution(stride) {\n    counter = 0;\n    let outputMappings = generateOutputMappings(stride, output, kernel.length, padded_input_size, dilation);\n    if (stride <= 0) return;\n    if (interval) clearInterval(interval);\n    interval = setInterval(() => {\n      if (isPaused) return;\n      const flat_animated = counter % (output.length * output.length);\n      outputHighlights = array1d(output.length * output.length, (i) => false);\n      const animatedH = Math.floor(flat_animated / output.length);\n      const animatedW = flat_animated % output.length;\n      outputHighlights[animatedH * output.length + animatedW] = true;\n      inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, padded_input_size, kernel.length, outputMappings, kernel.length)\n      const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, kernel.length);\n      testInputMatrixSlice = gridData(inputMatrixSlice);\n      const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n      testOutputMatrixSlice = gridData(outputMatrixSlice);\n      counter++;\n    }, 250)\n  }\n\n  function handleMouseover(event) {\n    let outputMappings = generateOutputMappings(stride, output, kernel.length, padded_input_size, dilation);\n    outputHighlights = array1d(output.length * output.length, (i) => false);\n    const animatedH = event.detail.hoverH;\n    const animatedW = event.detail.hoverW;\n    outputHighlights[animatedH * output.length + animatedW] = true;\n    inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, padded_input_size, kernel.length, outputMappings, kernel.length)\n    const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, kernel.length);\n    testInputMatrixSlice = gridData(inputMatrixSlice);\n    const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n    testOutputMatrixSlice = gridData(outputMatrixSlice);\n    isPaused = true;\n    dispatch('message', {\n      text: isPaused\n    });\n  }\n\n  startConvolution(stride);\n  let testImage = gridData(image)\n  let testOutput = gridData(output)\n  let testKernel = gridData(kernel)\n  $ : {\n    startConvolution(stride);\n    testImage = gridData(image)\n    testOutput = gridData(output)\n    testKernel = gridData(kernel)\n  }\n</script>\n\n<style>\n  .column {\n    padding: 5px;\n  }\n</style>\n\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    Input ({image.length}, {image[0].length})\n  </div>\n  <Dataview on:message={handleMouseover} data={testImage} highlights={inputHighlights} outputLength={output.length}\n      isKernelMath={false} constraint={getVisualizationSizeConstraint(image.length)}\n      dataRange={dataRange} stride={stride} colorScale={colorScale}\n      isInputLayer={isInputInputLayer}/>\n</div>\n<div class=\"column has-text-centered\">\n  <KernelMathView data={testInputMatrixSlice} kernel={testKernel} constraint={getVisualizationSizeConstraint(kernel.length)}\n                  dataRange={dataRange} kernelRange={getDataRange(kernel)} colorScale={colorScale}\n                  isInputLayer={isInputInputLayer}/>\n  <Dataview data={testOutputMatrixSlice} highlights={outputHighlights} isKernelMath={true} \n      constraint={getVisualizationSizeConstraint(kernel.length)} dataRange={dataRange}/>\n</div>\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    Output ({output.length}, {output[0].length})\n  </div>\n  <Dataview on:message={handleMouseover} data={testOutput} highlights={outputHighlights} isKernelMath={false}\n      outputLength={output.length} constraint={getVisualizationSizeConstraint(output.length)} dataRange={dataRange} stride={stride}/>\n</div>",
    "<script>\n\timport ConvolutionAnimator from './ConvolutionAnimator.svelte';\n  import { singleConv } from '../utils/cnn.js';\n  import { createEventDispatcher } from 'svelte';\n\n  export let input;\n  export let kernel;\n  export let dataRange;\n  export let colorScale = d3.interpolateRdBu;\n  export let isInputInputLayer = false;\n  export let isExited = false;\n  // export let output;\n  \n  const dispatch = createEventDispatcher();\n\tlet stride = 1;\n  const dilation = 1;\n  var isPaused = false;\n  var outputFinal = singleConv(input, kernel, stride);\n  $: if (stride > 0) {\n    try { \n      outputFinal = singleConv(input, kernel, stride);\n    } catch {\n      console.log(\"Cannot handle stride of \" + stride);\n    }\n  }\n  \n  function handleClickPause() {\n    isPaused = !isPaused;\n  }\n\n  function handleScroll() {\n    let svgHeight = Number(d3.select('#cnn-svg').style('height').replace('px', '')) + 150;\n    let scroll = new SmoothScroll('a[href*=\"#\"]', {offset: -svgHeight});\n    let anchor = document.querySelector(`#article-convolution`);\n    scroll.animateScroll(anchor);\n  }\n\n  function handlePauseFromInteraction(event) {\n    isPaused = event.detail.text;\n  }\n\n  function handleClickX() {\n    isExited = true;\n    dispatch('message', {\n      text: isExited\n    });\n  }\n</script>\n\n<style>\n  .control-pannel {\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .buttons {\n    cursor: pointer;\n    position: absolute;\n    top: 0px;\n    right: 0px;\n  }\n\n  .control-button {\n    color: gray;\n    font-size: 15px;\n    opacity: 0.4;\n    cursor: pointer;\n  }\n\n  .control-button:not(:first-child) {\n    margin-left: 5px;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-left : 10px;\n    font-size: 12px;\n  }\n\n  .annotation > img {\n    width: 17px;\n    margin-right: 5px;\n  }\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .box {\n    padding: 5px 15px 10px 15px;\n  }\n\n  .container {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n  }\n\n  .title-text {\n    font-size: 1.2em;\n    font-weight: 500;\n    color: #4a4a4a;\n  }\n</style>\n\n{#if !isExited}\n  <div class=\"container\" id=\"detailview-container\">\n\n    <!-- old stride input -->\n    <!-- <div class=\"columns is-mobile\">\n      <div class=\"column is-half is-offset-one-quarter\">\n        <div class=\"field is-grouped\">\n          <p class=\"control is-expanded\">\n            <input class=\"input\" type=\"text\" placeholder=\"Stride\" bind:value={stride} />\n          </p>\n          <p class=\"control\">\n            <button class=\"button is-success\" on:click={handleClickPause}>\n              Toggle Movement\n            </button>\n          </p>\n        </div>\n      </div>\n    </div> -->\n\n    <div class=\"box\">\n\n      <div class=\"control-pannel\">\n\n        <div class=\"title-text\">\n          Convolution\n        </div>\n\n        <div class=\"buttons\">\n          <div class=\"control-button\" on:click={handleScroll} title=\"Jump to article section\">\n            <i class=\"fas fa-info-circle\"></i>\n          </div>\n\n          <div class=\"play-button control-button\" on:click={handleClickPause} title=\"Play animation\">\n            {@html isPaused ?\n              '<i class=\"fas fa-play-circle play-icon\"></i>' :\n              '<i class=\"fas fa-pause-circle\"></i>'}\n          </div>\n\n          <div class=\"delete-button control-button\" on:click={handleClickX} title=\"Close\">\n            <i class=\"fas control-icon fa-times-circle\"></i>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"container is-centered\">\n        <ConvolutionAnimator on:message={handlePauseFromInteraction} \n          kernel={kernel} image={input} output={outputFinal} \n          stride={stride} dilation={dilation} isPaused={isPaused}\n          dataRange={dataRange} colorScale={colorScale}\n          isInputInputLayer={isInputInputLayer} />\n      </div>\n\n      <div class=\"annotation\">\n        <img src='PUBLIC_URL/assets/img/pointer.svg' alt='pointer icon'>\n        <div class=\"annotation-text\">\n          <span style=\"font-weight:600\">Hover over</span> the matrices to change kernel position.\n        </div>\n      </div>\n\n    </div>\n  </div>\n{/if}",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { array1d, compute_input_multiplies_with_weight,\n          generateOutputMappings, gridData\n  } from './DetailviewUtils.js';\n  import HyperparameterDataview from './HyperparameterDataview.svelte';\n  import KernelMathView from './KernelMathView.svelte';\n  // image: nxn array -- prepadded.\n  // kernel: mxm array.\n  // stride: int\n  export let stride;\n  export let dilation\n  export let kernel;\n  export let image;\n  export let output;\n  export let isPaused;\n  export let padding;\n  export let isStrideValid;\n\n  const dispatch = createEventDispatcher();\n\n  let inputHighlights = [];\n  let outputHighlights = array1d(output.length * output.length, (i) => true);\n  let interval;\n  $ : {\n    let inputHighlights = [];\n    let outputHighlights = array1d(output.length * output.length, (i) => true);\n    let interval;\n  }\n\n  let counter;\n  // lots of replication between mouseover and start-conv. TODO: fix this.\n  function startConvolution(stride) {\n    counter = 0;\n    isPaused = false;\n    dispatch('message', {\n      text: isPaused\n    });\n    let outputMappings = generateOutputMappings(stride, output, kernel.length, image.length, dilation);\n    if (stride <= 0) return;\n    if (interval) clearInterval(interval);\n    interval = setInterval(() => {\n      if (isPaused || !isStrideValid) return;\n      const flat_animated = counter % (output.length * output.length);\n      outputHighlights = array1d(output.length * output.length, (i) => false);\n      const animatedH = Math.floor(flat_animated / output.length);\n      const animatedW = flat_animated % output.length;\n      outputHighlights[animatedH * output.length + animatedW] = true;\n      inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, image.length, kernel.length, outputMappings, kernel.length)\n      counter++;\n    }, 1000)\n  }\n\n  function handleMouseover(event) {\n    let outputMappings = generateOutputMappings(stride, output, kernel.length, image.length, dilation);\n    outputHighlights = array1d(output.length * output.length, (i) => false);\n    const animatedH = event.detail.hoverH;\n    const animatedW = event.detail.hoverW;\n    outputHighlights[animatedH * output.length + animatedW] = true;\n    inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, image.length, kernel.length, outputMappings, kernel.length)\n    isPaused = true;\n    dispatch('message', {\n      text: isPaused\n    });\n  }\n\n  // Fix the total grid size to change hyperparameters without changing the grid\n  // size.  This must be two pixels smaller than the HyperparameterDataview svg\n  // size, so that the stroke on the right side of the grid does not get cut off.\n  const gridSize = 198;\n  startConvolution(stride);\n  let testImage = gridData(image, gridSize / image.length);\n  let testOutput = gridData(output, gridSize / output.length);\n  let testKernel = gridData(kernel, gridSize / kernel.length);\n  $ : {\n    startConvolution(stride);\n    testImage = gridData(image, gridSize / image.length);\n    testOutput = gridData(output, gridSize / output.length);\n    testKernel = gridData(kernel, gridSize / kernel.length);\n  }\n</script>\n\n<style>\n  .wrapper {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end;\n  }\n\n  .column {\n    padding: 5px 10px 10px 10px;\n  }\n\n  .header-text {\n    line-height: 1.1;\n  }\n\n  .header-sub-text {\n    font-size: 13px;\n    color: #9a9a9a;\n    margin-bottom: 2px;\n  }\n</style>\n\n<div class=\"wrapper\">\n  <div class=\"column has-text-centered\">\n    <div class=\"header-text\">\n      Input ({image.length - 2 * padding}, {image.length - 2 * padding}) <br/>\n    </div>\n    <div class=\"header-sub-text\">\n      After-padding ({image.length}, {image.length})\n    </div>\n    <HyperparameterDataview on:message={handleMouseover} data={testImage} highlights={inputHighlights}\n        outputLength={output.length} stride={stride} padding={padding} isStrideValid={isStrideValid}/>\n  </div>\n  <div class=\"column has-text-centered\">\n    <div class=\"header-text\" style=\"padding-top: 27px;\">\n      Output ({output.length}, {output.length})\n    </div>\n    <div class=\"header-sub-text\">\n      &nbsp;\n    </div>\n    <HyperparameterDataview on:message={handleMouseover} data={testOutput} highlights={outputHighlights}\n        outputLength={output.length} stride={stride} padding={padding} isOutput={true} isStrideValid={isStrideValid}/>\n  </div>\n</div>",
    "<script>\n  import HyperparameterAnimator from \"./HyperparameterAnimator.svelte\";\n  import { singleConv } from \"../utils/cnn.js\";\n\n  let inputSize = 5;\n  let kernelSize = 2;\n  let padding = 0;\n  let stride = 1;\n  const dilation = 1;\n  let isPaused = false;\n  let isStrideValid = true;\n  $: inputSizeWithPadding = inputSize + 2 * padding;\n\n  function generateSquareArray(arrayDim) {\n    let arr = [];\n    for (let i = 0; i < arrayDim; i++) {\n      arr.push([]);\n      for (let j = 0; j < arrayDim; j++) {\n        arr[i].push(0);\n      }\n    }\n    return arr;\n  }\n\n  function handleClickPause() {\n    isPaused = !isPaused;\n  }\n\n  function handlePauseFromInteraction(event) {\n    isPaused = event.detail.text;\n  }\n\n  // Update input, kernel, and output as user adjusts hyperparameters.\n  let input = generateSquareArray(inputSize + padding * 2);\n  let kernel = generateSquareArray(kernelSize);\n  $: input = generateSquareArray(inputSize + padding * 2);\n  $: kernel = generateSquareArray(kernelSize);\n  let outputFinal = singleConv(input, kernel, stride);\n  $: if (stride > 0) {\n    const stepSize = (inputSizeWithPadding - kernelSize) / stride + 1;\n    let strideNumberInput = document.getElementById(\"strideNumber\");\n    if (Number.isInteger(stepSize)) {\n      outputFinal = singleConv(input, kernel, stride);\n      if (strideNumberInput != null) {\n        strideNumberInput.className = strideNumberInput.className.replace(\n          \"is-danger\",\n          \"\"\n        );\n      }\n      isStrideValid = true;\n    } else {\n      if (!strideNumberInput.className.includes(\"is-danger\")) {\n        strideNumberInput.className += \" is-danger\";\n      }\n      isStrideValid = false;\n      console.log(\"Cannot handle stride of \" + stride);\n    }\n  }\n</script>\n\n<div class=\"container has-text-centered\" id=\"detailview-container\">\n  <div class=\"box\">\n    <div class=\"control-button\" on:click={handleClickPause}>\n      {@html isPaused\n        ? '<i class=\"fas fa-play-circle play-icon\"></i>'\n        : '<i class=\"fas fa-pause-circle\"></i>'}\n    </div>\n\n    <div class=\"content-container\">\n      <div class=\"left-part\">\n        <div class=\"input-row\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label\">Input Size:</label>\n            </div>\n            <input\n              class=\"input is-very-small\"\n              type=\"number\"\n              bind:value={inputSize}\n              min={kernelSize}\n              max={7}\n            />\n          </div>\n\n          <input type=\"range\" bind:value={inputSize} min={kernelSize} max={7} />\n        </div>\n\n        <div class=\"input-row\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label\">Padding:</label>\n            </div>\n            <input\n              class=\"input is-very-small\"\n              type=\"number\"\n              bind:value={padding}\n              min={0}\n              max={kernelSize - 1}\n            />\n          </div>\n\n          <input\n            type=\"range\"\n            bind:value={padding}\n            min={0}\n            max={kernelSize - 1}\n          />\n        </div>\n\n        <div class=\"input-row\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label\">Kernel Size:</label>\n            </div>\n            <input\n              class=\"input is-very-small\"\n              type=\"number\"\n              bind:value={kernelSize}\n              min={padding + 1}\n              max={inputSizeWithPadding}\n            />\n          </div>\n\n          <input\n            type=\"range\"\n            bind:value={kernelSize}\n            min={padding + 1}\n            max={inputSizeWithPadding}\n          />\n        </div>\n\n        <div class=\"input-row\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label\">Stride:</label>\n            </div>\n            <input\n              class=\"input is-very-small\"\n              type=\"number\"\n              id=\"strideNumber\"\n              bind:value={stride}\n              min=\"1\"\n              max={Math.max(inputSizeWithPadding - kernelSize + 1, 2)}\n            />\n          </div>\n\n          <input\n            type=\"range\"\n            bind:value={stride}\n            min=\"1\"\n            max={Math.max(inputSizeWithPadding - kernelSize + 1, 2)}\n          />\n        </div>\n      </div>\n\n      <div class=\"right-part\">\n        <HyperparameterAnimator\n          on:message={handlePauseFromInteraction}\n          {kernel}\n          image={input}\n          output={outputFinal}\n          {isStrideValid}\n          {stride}\n          {dilation}\n          {padding}\n          {isPaused}\n        />\n\n        <div class=\"annotation\">\n          <img\n            src=\"PUBLIC_URL/assets/img/pointer.svg\"\n            alt=\"pointer icon\"\n            width=\"25px\"\n          />\n          <div class=\"annotation-text-hyper\">\n            <span style=\"font-weight:600\">Hover over</span> the matrices to change\n            kernel position.\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<style>\n  .control-button {\n    position: absolute;\n    top: 5px;\n    right: 15px;\n    color: gray;\n    font-size: 22px;\n    opacity: 0.4;\n    cursor: pointer;\n  }\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .box {\n    padding: 5px 30px 20px 30px;\n    position: relative;\n  }\n\n  .left-part {\n    display: flex;\n    flex-direction: column;\n    margin-top: 30px;\n  }\n\n  .right-part {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .content-container {\n    display: flex;\n    justify-content: space-around;\n  }\n\n  .field {\n    padding-top: 5px;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    padding-left: 10px;\n  }\n\n  .annotation-text-hyper {\n    font-size: 15px;\n    font-style: italic;\n  }\n\n  .annotation > img {\n    width: 30px;\n    margin-right: 0;\n  }\n\n  .is-very-small {\n    font-size: 12px;\n  }\n\n  .field {\n    align-items: center;\n  }\n\n  .field-label.is-normal {\n    padding-top: 0;\n  }\n\n  .field:not(:last-child) {\n    margin-bottom: 7px;\n  }\n\n  label {\n    display: inline-block;\n    width: 105px;\n    text-align: right;\n    font-weight: 500;\n    color: #4a4a4a;\n  }\n\n  input[type=\"number\"] {\n    width: 50px;\n  }\n\n  input[type=\"range\"] {\n    width: 160px;\n  }\n</style>\n",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { array1d, getMatrixSliceFromOutputHighlights,\n    compute_input_multiplies_with_weight, getVisualizationSizeConstraint,\n    generateOutputMappings, getMatrixSliceFromInputHighlights, gridData\n  } from './DetailviewUtils.js';\n  import Dataview from './Dataview.svelte';\n\n  export let stride;\n  export let dilation\n  export let kernelLength;\n  export let image;\n  export let output;\n  export let isPaused;\n  export let dataRange;\n\n  const dispatch = createEventDispatcher();\n  const padding = 0;\n  let padded_input_size = image.length + padding * 2;\n  $: padded_input_size = image.length + padding * 2;\n\n  // Dummy data for original state of component.\n  let testInputMatrixSlice = [];\n  for (let i = 0; i < kernelLength; i++) {\n    testInputMatrixSlice.push([]);\n    for (let j = 0; j < kernelLength; j++) {\n      testInputMatrixSlice[i].push(0)\n    }\n  }\n  testInputMatrixSlice = gridData(testInputMatrixSlice)\n  let testOutputMatrixSlice = gridData([[0]]);\n\n  let inputHighlights = [];\n  let outputHighlights = array1d(output.length * output.length, (i) => true);\n  let interval;\n  $ : {\n    let inputHighlights = [];\n    let outputHighlights = array1d(output.length * output.length, (i) => true);\n    let interval;\n  }\n  \n  let counter;\n\n  // lots of replication between mouseover and start-pool. TODO: fix this.\n  function startMaxPool(stride) {\n    counter = 0;\n    let outputMappings = generateOutputMappings(stride, output, kernelLength, padded_input_size, dilation);\n    if (stride <= 0) return;\n    if (interval) clearInterval(interval);\n    interval = setInterval(() => {\n      if (isPaused) return;\n      const flat_animated = counter % (output.length * output.length);\n      outputHighlights = array1d(output.length * output.length, (i) => false);\n      const animatedH = Math.floor(flat_animated / output.length);\n      const animatedW = flat_animated % output.length;\n      outputHighlights[animatedH * output.length + animatedW] = true;\n      inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, padded_input_size, kernelLength, outputMappings, kernelLength)\n      const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, kernelLength);\n      testInputMatrixSlice = gridData(inputMatrixSlice);\n      const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n      testOutputMatrixSlice = gridData(outputMatrixSlice);\n      counter++;\n    }, 250)\n  }\n\n  function handleMouseover(event) {\n    let outputMappings = generateOutputMappings(stride, output, kernelLength, padded_input_size, dilation);\n    outputHighlights = array1d(output.length * output.length, (i) => false);\n    const animatedH = event.detail.hoverH;\n    const animatedW = event.detail.hoverW;\n    outputHighlights[animatedH * output.length + animatedW] = true;\n    inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, padded_input_size, kernelLength, outputMappings, kernelLength)\n    const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, kernelLength);\n    testInputMatrixSlice = gridData(inputMatrixSlice);\n    const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n    testOutputMatrixSlice = gridData(outputMatrixSlice);\n    isPaused = true;\n    dispatch('message', {\n      text: isPaused\n    });\n  }\n\n  startMaxPool(stride);\n  let testImage = gridData(image)\n  let testOutput = gridData(output)\n  $ : {\n    startMaxPool(stride);\n    testImage = gridData(image)\n    testOutput = gridData(output)\n  }\n</script>\n\n<style>\n  .column {\n    padding: 5px;\n  }\n</style>\n\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    Input ({testImage.length}, {testImage[0].length})\n  </div>\n\n  <Dataview on:message={handleMouseover} data={testImage} highlights={inputHighlights} outputLength={output.length}\n      isKernelMath={false} constraint={getVisualizationSizeConstraint(image.length)} dataRange={dataRange} stride={stride}/>  \n</div>\n<div class=\"column has-text-centered\">\n  <span>\n    max(\n    <Dataview data={testInputMatrixSlice} highlights={outputHighlights} isKernelMath={true} \n      constraint={getVisualizationSizeConstraint(kernelLength)} dataRange={dataRange}/>\n    )\n    =\n    <Dataview data={testOutputMatrixSlice} highlights={outputHighlights} isKernelMath={true} \n      constraint={getVisualizationSizeConstraint(kernelLength)} dataRange={dataRange}/>\n  </span> \n</div>\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    Output ({testOutput.length}, {testOutput[0].length})\n  </div>\n  <Dataview on:message={handleMouseover} data={testOutput} highlights={outputHighlights} isKernelMath={false} \n      outputLength={output.length} constraint={getVisualizationSizeConstraint(output.length)} dataRange={dataRange} stride={stride}/>\n</div>",
    "<script>\n\timport PoolAnimator from './PoolAnimator.svelte';\n  import { singleMaxPooling } from '../utils/cnn.js';\n  import { createEventDispatcher } from 'svelte';\n\n  export let input;\n  export let kernelLength;\n  export let dataRange;\n  export let isExited;\n  \n  const dispatch = createEventDispatcher();\n  // let isExited = false;\n\tlet stride = 2;\n  const dilation = 1;\n  var isPaused = false;\n  var outputFinal = singleMaxPooling(input);\n  // let dragging = false;\n  // let dragInfo = {x1: 0, x2: 0, y1: 0, y2: 0};\n  // let detailView = d3.select('#detailview').node();\n  $: if (stride > 0) {\n    try { \n      outputFinal = singleMaxPooling(input);\n    } catch {\n      console.log(\"Cannot handle stride of \" + stride);\n    }\n  }\n  \n  function handleClickPause() {\n    isPaused = !isPaused;\n    console.log(isPaused)\n  }\n\n  function handlePauseFromInteraction(event) {\n    isPaused = event.detail.text;\n  }\n\n  function handleClickX() {\n    dispatch('message', {\n      text: true\n    });\n  }\n\n  function handleScroll() {\n    let svgHeight = Number(d3.select('#cnn-svg').style('height').replace('px', '')) + 150;\n    let scroll = new SmoothScroll('a[href*=\"#\"]', {offset: -svgHeight});\n    let anchor = document.querySelector(`#article-pooling`);\n    scroll.animateScroll(anchor);\n  }\n\n  // Test dragging detail view, need more work\n  // const detailViewDragStart = (e) => {\n  //   // Record the starting pos\n  //   dragInfo.x1 = 0;\n  //   dragInfo.y1 = 0;\n  //   dragInfo.x2 = e.clientX;\n  //   dragInfo.y2 = e.clientY;\n  \n  //   dragging = true;\n  // }\n\n  // const detailViewDragEnd = (e) => {\n  //   dragging = false;\n  // }\n\n  // const detailViewDragMove = (e) => {\n  //   // Add up move to the starting pos\n  //   dragInfo.x1 = dragInfo.x2 - e.clientX;\n  //   dragInfo.y1 = dragInfo.y2 - e.clientY;\n  //   dragInfo.x2 = e.clientX;\n  //   dragInfo.y2 = e.clientY;\n\n  //   // Move detail view\n  //   detailView.style.top = (detailView.offsetTop - dragInfo.y1) + 'px';\n  //   detailView.style.left = (detailView.offsetLeft - dragInfo.x1) + 'px';\n  // }\n</script>\n\n<style>\n  .control-pannel {\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .buttons {\n    cursor: pointer;\n    position: absolute;\n    top: 0px;\n    right: 0px;\n  }\n\n  .control-button {\n    color: gray;\n    font-size: 15px;\n    opacity: 0.4;\n    cursor: pointer;\n  }\n\n  .control-button:not(:first-child) {\n    margin-left: 5px;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-left : 10px;\n    font-size: 12px;\n  }\n\n  .annotation > img {\n    width: 17px;\n    margin-right: 5px;\n  }\n\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .box {\n    padding: 5px 15px 10px 15px;\n  }\n\n  .container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  .title-text {\n    font-size: 1.2em;\n    font-weight: 500;\n    color: #4a4a4a;\n  }\n</style>\n\n{#if !isExited}\n  <div class=\"container\">\n\n    <!-- old stride input -->\n    <!-- <div class=\"columns is-mobile\">\n      <div class=\"column is-half is-offset-one-quarter\">\n        <div class=\"field is-grouped\">\n          <p class=\"control is-expanded\">\n            <input class=\"input\" type=\"text\" placeholder=\"Stride\" bind:value={stride} />\n          </p>\n          <p class=\"control\">\n            <button class=\"button is-success\" on:click={handleClickPause}>\n              Toggle Movement\n            </button>\n          </p>\n        </div>\n      </div>\n    </div> -->\n    <div class=\"box\">\n\n      <div class=\"control-pannel\">\n      \n        <div class=\"title-text\">\n          Max Pooling\n        </div>\n\n        <div class=\"buttons\">\n\n          <div class=\"control-button\" on:click={handleScroll} title=\"Jump to article section\">\n            <i class=\"fas fa-info-circle\"></i>\n          </div>\n\n          <div class=\"play-button control-button\" on:click={handleClickPause} title=\"Play animation\">\n            {@html isPaused ?\n              '<i class=\"fas fa-play-circle play-icon\"></i>' :\n              '<i class=\"fas fa-pause-circle\"></i>'}\n          </div>\n\n          <div class=\"delete-button control-button\" on:click={handleClickX} title=\"Close\">\n            <i class=\"fas control-icon fa-times-circle\"></i>\n          </div>\n        </div>\n\n      </div>\n\n      <div class=\"container is-centered is-vcentered\">\n        <PoolAnimator on:message={handlePauseFromInteraction} \n          kernelLength={kernelLength} image={input} output={outputFinal} \n          stride={stride} dilation={dilation} isPaused={isPaused}\n          dataRange={dataRange} />\n      </div>\n\n      <div class=\"annotation\">\n        <img src='PUBLIC_URL/assets/img/pointer.svg' alt='pointer icon'>\n          <div class=\"annotation-text\">\n            <span style=\"font-weight:600\">Hover over</span> the matrices to change kernel position.\n          </div>\n      </div>\n\n    </div>\n  </div>\n{/if}",
    "<script>\n  import { onMount, afterUpdate, createEventDispatcher } from 'svelte';\n  export let logits;\n  export let logitColors;\n  export let selectedI;\n  export let highlightI = -1;\n  export let outputName;\n  export let outputValue;\n  export let startAnimation;\n  let softmaxViewComponent;\n  let svg = null;\n  const dispatch = createEventDispatcher();\n  const formater = (n, d) => {\n    if (d === undefined) {\n      return d3.format('.2f')(n);\n    } else {\n      return d3.format(`.${d}f`)(n);\n    }\n  }\n  $: highlightI, (() => {\n    if (svg !== null) {\n      svg.selectAll(`.formula-term`)\n        .style('text-decoration', 'none')\n        .style('font-weight', 'normal');\n      svg.selectAll(`.formula-term-${highlightI}`)\n      .style('font-weight', 'bold')\n      .style('text-decoration', 'underline');\n    }\n  })();\n  $: startAnimation, (() => {\n    if (svg !== null) {\n      svg.select(`.formula-term-${startAnimation.i}`)\n        .transition('softmax-edge')\n        .duration(startAnimation.duration)\n        .style('fill-opacity', 1);\n    }\n  })();\n  const mouseOverHandler = (d, i, g, curI) => {\n    highlightI = curI;\n    dispatch('mouseOver', {curI: curI});\n  }\n  const mouseLeaveHandler = (d, i, g, curI) => {\n    highlightI = -1;\n    dispatch('mouseLeave', {curI: curI});\n  }\n  const handleClickX = () => {\n    dispatch('xClicked', {});\n  }\n  function handleScroll() {\n    let svgHeight = Number(d3.select('#cnn-svg').style('height').replace('px', '')) + 150;\n    let scroll = new SmoothScroll('a[href*=\"#\"]', {offset: -svgHeight});\n    let anchor = document.querySelector(`#article-softmax`);\n    scroll.animateScroll(anchor);\n  }\n  onMount(() => {\n    svg = d3.select(softmaxViewComponent)\n      .select('#softmax-svg');\n    let formulaRightGroup = svg.append('g')\n      .attr('class', 'formula-right')\n      .attr('transform', `translate(${10}, ${0})`)\n      .style('font-size', '15px');\n    // Denominator\n    let denominatorGroup = formulaRightGroup.append('g')\n      .attr('class', 'denominator')\n      .attr('transform', `translate(${0}, ${58})`);\n      \n    // Add the left (\n    denominatorGroup.append('text')\n      .attr('x', 0)\n      .attr('y', 0)\n      .style('fill', 'gray')\n      .text('(');\n    // Need to loop through the logits array instead of data-binding because\n    // we want dynamic positioning based on prior '-' occurance\n    let curX = 8;\n    let numOfRows = 4;\n    logits.forEach((d, i) => {\n      if (i / numOfRows >= 1 && i % numOfRows === 0) {\n          curX = 8;\n      }\n      let curText = denominatorGroup.append('text')\n        .attr('x', curX)\n        .attr('y', Math.floor(i / numOfRows) * 20)\n        .style('cursor', 'crosshair')\n        .style('pointer-events', 'all')\n        .on('mouseover', (d, n, g) => mouseOverHandler(d, n, g, i))\n        .on('mouseleave', (d, n, g) => mouseLeaveHandler(d, n, g, i))\n        .text(`exp(`);\n      \n      curText.append('tspan')\n        .attr('class', `formula-term-${i} formula-term`)\n        .attr('dx', '1')\n        .style('fill', logitColors[i])\n        .style('fill-opacity', (i === selectedI) || startAnimation.hasInitialized ? 1 : 0)\n        .text(formater(d));\n      \n      curText.append('tspan')\n        .attr('dx', '1')\n        .text(')');\n      \n      let curBBox = curText.node().getBBox();\n      curX += curBBox.width + 4;\n      if (i !== logits.length - 1) {\n        denominatorGroup.append('text')\n          .attr('x', curX)\n          .attr('y', Math.floor(i / numOfRows) * 20)\n          .text('+');\n        curX += 14;\n      } else {\n        denominatorGroup.append('text')\n          .attr('x', curX-2)\n          .attr('y', Math.floor(i / numOfRows) * 20)\n          .style('fill', 'gray')\n          .text(')');\n      }\n    })\n    denominatorGroup.selectAll('text')\n      .data(logits)\n      .enter()\n      .append('text')\n      .attr('x', (d, i) => 40 * i)\n      .attr('y', 0)\n      .text(d => formater(d));\n    \n    // Calculate the dynamic denominator group width\n    let denominatorGroupBBox = denominatorGroup.node().getBBox();\n    // Draw the fraction line\n    formulaRightGroup.append('line')\n      .attr('class', 'separation-line')\n      .attr('x1', -5)\n      .attr('x2', denominatorGroupBBox.width + 5)\n      .attr('y1', 32)\n      .attr('y2', 32)\n      .style('stroke-width', 1.2)\n      .style('stroke', 'gray');\n    \n    // Draw the numerator\n    let numeratorGroup = formulaRightGroup.append('g')\n      .attr('class', 'numerator-group')\n      .attr('transform', `translate(${0}, ${20})`);\n    \n    let numeratorText = numeratorGroup.append('text')\n      .attr('x', denominatorGroupBBox.x + denominatorGroupBBox.width / 2)\n      .attr('y', 0)\n      .on('mouseover', (d, n, g) => mouseOverHandler(d, n, g, selectedI))\n      .on('mouseleave', (d, n, g) => mouseLeaveHandler(d, n, g, selectedI))\n      .style('pointer-events', 'all')\n      .style('cursor', 'crosshair')\n      .style('text-anchor', 'middle')\n      .text('exp(');\n    numeratorText.append('tspan')\n      .attr('class', `formula-term-${selectedI} formula-term`)\n      .attr('dx', 1)\n      .style('fill', logitColors[selectedI])\n      .text(`${formater(logits[selectedI])}`);\n    numeratorText.append('tspan')\n       .attr('dx', 1)\n      .text(')');\n    \n    // Draw the left part of the formula\n    let formulaLeftGroup = svg.append('g')\n      .attr('class', 'formula-left')\n      .attr('transform', `translate(${395}, ${32})`);\n    \n    let softmaxText = formulaLeftGroup.append('text')\n      .attr('x', 20)\n      .attr('dominant-baseline', 'middle')\n      .text(`${formater(outputValue, 4)}`);\n    \n    let softmaxTextBBox = softmaxText.node().getBBox();\n    \n    formulaLeftGroup.append('text')\n      .attr('dominant-baseline', 'middle')\n      .attr('x', 0)\n      .attr('y', 0)\n      .style('fill', 'gray')\n      .style('font-weight', 'bold')\n      .text('=');\n  })\n</script>\n\n<style>\n  .buttons {\n    cursor: pointer;\n    position: absolute;\n    top: 6px;\n    right: 10px;\n  }\n  .control-button {\n    color: gray;\n    font-size: 15px;\n    opacity: 0.4;\n  }\n  .control-button:hover {\n    opacity: 0.8;\n  }\n  .control-button:not(:first-child) {\n    margin-left: 5px;\n  }\n  .title-text {\n    font-size: 1.2em;\n    font-weight: 500;\n    color: #4a4a4a;\n  }\n  .annotation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-left : 10px;\n    font-size: 12px;\n  }\n  .annotation > img {\n    width: 17px;\n    margin-right: 5px;\n  }\n  .box {\n    padding: 5px 10px 15px 10px;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n  svg {\n    margin: 10px 0 12px 0;\n  }\n</style>\n\n<div class=\"container\" bind:this={softmaxViewComponent}>\n  <div class=\"box\">\n\n    <div class=\"buttons\">\n      \n\n      <div class=\"delete-button control-button\" on:click={handleClickX} title=\"Close\">\n        <i class=\"fas control-icon fa-times-circle\"></i>\n      </div>\n    </div>\n\n    <div class=\"title-text\">\n      Softmax Score for <i>\"{outputName}\"</i>\n    </div>\n\n    <svg id=\"softmax-svg\" width=\"470\" height=\"105\"/>\n\n    <div class=\"annotation\">\n      <img src='PUBLIC_URL/assets/img/pointer.svg' alt='pointer icon'>\n      <div class=\"annotation-text\">\n        <span style=\"font-weight:600\">Hover over</span> the numbers to highlight logit circles.\n      </div>\n    </div>\n\n  </div>\n</div>",
    "<script>\n  /* global d3 */\n\n  import { onMount, createEventDispatcher } from 'svelte';\n  import { modalStore } from '../stores.js';\n\n  let modalComponent;\n  let valiImg;\n  let inputValue = '';\n  let showLoading = false;\n  let files;\n  let usingURL = true;\n  let errorInfo = {\n    show: false,\n    error: ''\n  };\n  const dispatch = createEventDispatcher();\n\n  let modalInfo = {\n    show: false\n  };\n  modalStore.set(modalInfo);\n  modalStore.subscribe(value => {modalInfo = value});\n\n  const errorCallback = () => {\n    // The URL is invalid, show an error message on the UI\n    showLoading = false;\n    errorInfo.show = true;\n    errorInfo.error = usingURL ? \"We can't find the image at that URL.\" :\n      \"Not a valid image file.\";\n  }\n\n  const loadCallback = () => {\n    // The URL is valid, but we are not sure if loading it to canvas would be\n    // blocked by crossOrigin setting. Try it here before dispatch to parent.\n\n    // https://stackoverflow.com/questions/13674835/canvas-tainted-by-cross-origin-data\n    let canvas = document.createElement(\"canvas\");\n    let context = canvas.getContext(\"2d\");\n\n    canvas.width = valiImg.width;\n    canvas.height = valiImg.height;\n    context.drawImage(valiImg, 0, 0);\n\n    try {\n      context.getImageData(0, 0, valiImg.width, valiImg.height);\n      // If the foreign image does support CORS -> use this image\n      // dispatch to parent component to use the input image\n      showLoading = false;\n      modalInfo.show = false;\n      modalStore.set(modalInfo);\n      dispatch('urlTyped', {url: valiImg.src});\n      inputValue = null;\n    } catch(err) {\n      // If the foreign image does not support CORS -> use this image\n      showLoading = false;\n      errorInfo.show = true;\n      errorInfo.error = \"No permission to load this image.\"\n    }\n  }\n\n  const imageUpload = () => {\n    usingURL = false;\n    let reader = new FileReader();\n    reader.onload = (event) => {\n      valiImg.src = event.target.result;\n    }\n    reader.readAsDataURL(files[0]);\n  }\n\n  const crossClicked = () => {\n    modalInfo.show = false;\n    modalStore.set(modalInfo);\n    // Dispatch the parent component\n    dispatch('xClicked', {preImage: modalInfo.preImage});\n  }\n\n  const addClicked = () => {\n    // Validate the input URL\n    showLoading = true;\n    errorInfo.show = false;\n    valiImg.crossOrigin = \"Anonymous\";\n    valiImg.src = inputValue;\n  }\n\n  onMount(() => {\n    let modal = d3.select(modalComponent)\n      .select('#input-modal');\n  })\n\n</script>\n\n<style>\n  .modal-card {\n    max-width: 500px;\n  }\n\n  .modal-card-title {\n    font-size: 20px;\n  }\n\n  .modal-card-head {\n    padding: 15px 20px;\n  }\n\n  .modal-card-foot {\n    padding: 12px 20px;\n    justify-content: space-between;\n  }\n\n  .is-smaller {\n    font-size: 15px;\n    padding: 0.5em 0.8em;\n    max-height: 2.2em;\n  }\n\n  .small-font {\n    font-size: 15px;\n  }\n\n  .error-message {\n    font-size: 15px;\n    padding: 0.5em 0;\n    color: #F22B61;\n  }\n\n  .control {\n    width: 100%;\n  }\n\n  .or-label {\n    font-size: 15px;\n    margin: 0 10px;\n    padding: 0.5em 0;\n  }\n\n  .field {\n    display: flex;\n    justify-content: space-between;\n  }\n\n</style>\n\n\n<div class=\"modal-component\"\n  bind:this={modalComponent}>\n\n  <div class=\"modal\"\n    id=\"input-modal\"\n    class:is-active={modalInfo.show}>\n\n    <div class=\"modal-background\" on:click={crossClicked}></div>\n\n    <div class=\"modal-card\">\n      <header class=\"modal-card-head\">\n        <p class=\"modal-card-title\">Add Input Image</p>\n        <button class=\"delete\" aria-label=\"close\" on:click={crossClicked}></button>\n      </header>\n\n      <section class=\"modal-card-body\">\n        <div class=\"field\">\n          <div class=\"control has-icons-left\"\n            class:is-loading={showLoading}>\n\n            <input class=\"input small-font\" type=\"url\"\n              bind:value={inputValue}\n              placeholder=\"Paste URL of image...\">\n\n            <span class=\"icon small-font is-left\">\n              <i class=\"fas fa-link\"></i>\n            </span>\n\n          </div>\n\n          <div class=\"or-label\">or</div>\n\n          <div class=\"file\">\n            <label class=\"file-label\">\n              <input class=\"file-input\" type=\"file\" name=\"image\"\n                accept=\".png,.jpeg,.tiff,.jpg,.png\"\n                bind:files={files}\n                on:change={imageUpload}>\n              <span class=\"file-cta small-font\">\n                <span class=\"file-icon\">\n                  <i class=\"fas fa-upload\"></i>\n                </span>\n                <span class=\"file-label\">\n                  Upload\n                </span>\n              </span>\n            </label>\n          </div>\n\n        </div>\n\n      </section>\n\n      <footer class=\"modal-card-foot\">\n\n        <div class=\"error-message\"\n          class:hidden={!errorInfo.show}>\n          {errorInfo.error}\n        </div>\n\n        <div class=\"button-container\">\n          <button class=\"button is-smaller\"\n            on:click={crossClicked}>\n            Cancel\n          </button>\n\n          <button class=\"button is-success is-smaller\"\n            on:click={addClicked}>\n            Add\n          </button>\n        </div>\n\n\n      </footer>\n    </div>\n\n  </div>\n\n  <!-- An invisible image to check if the user input URL is valid -->\n  <img style=\"display: none\"\n    id=\"vali-image\"\n    alt=\"hidden image\"\n    bind:this={valiImg}\n    on:error={errorCallback}\n    on:load={loadCallback} />\n\n</div>\n",
    "<script>\n  // Svelte functions\n  import { onMount } from \"svelte\";\n  import {\n    cnnStore,\n    svgStore,\n    vSpaceAroundGapStore,\n    hSpaceAroundGapStore,\n    nodeCoordinateStore,\n    selectedScaleLevelStore,\n    cnnLayerRangesStore,\n    needRedrawStore,\n    cnnLayerMinMaxStore,\n    detailedModeStore,\n    shouldIntermediateAnimateStore,\n    isInSoftmaxStore,\n    softmaxDetailViewStore,\n    hoverInfoStore,\n    allowsSoftmaxAnimationStore,\n    modalStore,\n    intermediateLayerPositionStore,\n  } from \"../stores.js\";\n\n  // Svelte views\n  import ConvolutionView from \"../detail-view/Convolutionview.svelte\";\n  import ActivationView from \"../detail-view/Activationview.svelte\";\n  import PoolView from \"../detail-view/Poolview.svelte\";\n  import SoftmaxView from \"../detail-view/Softmaxview.svelte\";\n  import Modal from \"./Modal.svelte\";\n  import Article from \"../article/Article.svelte\";\n  import OtherHalf from \"../article/otherHalf.svelte\";\n \n\n  // Overview functions\n  import { loadTrainedModel, constructCNN } from \"../utils/cnn-tf.js\";\n  import { overviewConfig } from \"../config.js\";\n\n  import {\n    addOverlayRect,\n    drawConv1,\n    drawConv2,\n    drawConv3,\n    drawConv4,\n  } from \"./intermediate-draw.js\";\n\n  import { moveLayerX, addOverlayGradient } from \"./intermediate-utils.js\";\n\n  import {\n    drawFlatten,\n    softmaxDetailViewMouseOverHandler,\n    softmaxDetailViewMouseLeaveHandler,\n  } from \"./flatten-draw.js\";\n\n  import {\n    drawOutput,\n    drawCNN,\n    updateCNN,\n    updateCNNLayerRanges,\n    drawCustomImage,\n  } from \"./overview-draw.js\";\n\n  // View bindings\n  let overviewComponent;\n  let scaleLevelSet = new Set([\"local\", \"module\", \"global\"]);\n  let selectedScaleLevel = \"local\";\n  selectedScaleLevelStore.set(selectedScaleLevel);\n  let previousSelectedScaleLevel = selectedScaleLevel;\n  let wholeSvg = undefined;\n  let svg = undefined;\n\n  $: selectedScaleLevel, selectedScaleLevelChanged();\n\n\n  \n  // Configs\n  const layerColorScales = overviewConfig.layerColorScales;\n  const nodeLength = overviewConfig.nodeLength;\n  const plusSymbolRadius = overviewConfig.plusSymbolRadius;\n  const numLayers = overviewConfig.numLayers;\n  const edgeOpacity = overviewConfig.edgeOpacity;\n  const edgeInitColor = overviewConfig.edgeInitColor;\n  const edgeHoverColor = overviewConfig.edgeHoverColor;\n  const edgeHoverOuting = overviewConfig.edgeHoverOuting;\n  const edgeStrokeWidth = overviewConfig.edgeStrokeWidth;\n  const intermediateColor = overviewConfig.intermediateColor;\n  const kernelRectLength = overviewConfig.kernelRectLength;\n  const svgPaddings = overviewConfig.svgPaddings;\n  const gapRatio = overviewConfig.gapRatio;\n  const overlayRectOffset = overviewConfig.overlayRectOffset;\n  const classLists = overviewConfig.classLists;\n\n  // Shared properties\n  let needRedraw = [undefined, undefined];\n  needRedrawStore.subscribe((value) => {\n    needRedraw = value;\n  });\n\n  let nodeCoordinate = undefined;\n  nodeCoordinateStore.subscribe((value) => {\n    nodeCoordinate = value;\n  });\n\n  let cnnLayerRanges = undefined;\n  cnnLayerRangesStore.subscribe((value) => {\n    cnnLayerRanges = value;\n  });\n\n  let cnnLayerMinMax = undefined;\n  cnnLayerMinMaxStore.subscribe((value) => {\n    cnnLayerMinMax = value;\n  });\n\n  let detailedMode = undefined;\n  detailedModeStore.subscribe((value) => {\n    detailedMode = value;\n  });\n\n  let shouldIntermediateAnimate = undefined;\n  shouldIntermediateAnimateStore.subscribe((value) => {\n    shouldIntermediateAnimate = value;\n  });\n\n  let vSpaceAroundGap = undefined;\n  vSpaceAroundGapStore.subscribe((value) => {\n    vSpaceAroundGap = value;\n  });\n\n  let hSpaceAroundGap = undefined;\n  hSpaceAroundGapStore.subscribe((value) => {\n    hSpaceAroundGap = value;\n  });\n\n  let isInSoftmax = undefined;\n  isInSoftmaxStore.subscribe((value) => {\n    isInSoftmax = value;\n  });\n\n  let softmaxDetailViewInfo = undefined;\n  softmaxDetailViewStore.subscribe((value) => {\n    softmaxDetailViewInfo = value;\n  });\n\n  let modalInfo = undefined;\n  modalStore.subscribe((value) => {\n    modalInfo = value;\n  });\n\n  let hoverInfo = undefined;\n  hoverInfoStore.subscribe((value) => {\n    hoverInfo = value;\n  });\n\n  let intermediateLayerPosition = undefined;\n  intermediateLayerPositionStore.subscribe((value) => {\n    intermediateLayerPosition = value;\n  });\n\n  let width = undefined;\n  let height = undefined;\n  let model = undefined;\n  let selectedNode = { layerName: \"\", index: -1, data: null };\n  let isInIntermediateView = false;\n  let isInActPoolDetailView = false;\n  let actPoolDetailViewNodeIndex = -1;\n  let actPoolDetailViewLayerIndex = -1;\n  let detailedViewNum = undefined;\n  let disableControl = false;\n\n  // Wait to load\n  let cnn = undefined;\n\n  let detailedViewAbsCoords = {\n    1: [600, 270, 490, 290],\n    2: [500, 270, 490, 290],\n    3: [700, 270, 490, 290],\n    4: [600, 270, 490, 290],\n    5: [650, 270, 490, 290],\n    6: [775, 270, 490, 290],\n    7: [100, 270, 490, 290],\n    8: [60, 270, 490, 290],\n    9: [200, 270, 490, 290],\n    10: [300, 270, 490, 290],\n  };\n\n  const layerIndexDict = {\n    input: 0,\n    conv_1_1: 1,\n    relu_1_1: 2,\n    conv_1_2: 3,\n    relu_1_2: 4,\n    max_pool_1: 5,\n    conv_2_1: 6,\n    relu_2_1: 7,\n    conv_2_2: 8,\n    relu_2_2: 9,\n    max_pool_2: 10,\n    output: 11,\n  };\n\n  const layerLegendDict = {\n    0: {\n      local: \"input-legend\",\n      module: \"input-legend\",\n      global: \"input-legend\",\n    },\n    1: {\n      local: \"local-legend-0-1\",\n      module: \"module-legend-0\",\n      global: \"global-legend\",\n    },\n    2: {\n      local: \"local-legend-0-1\",\n      module: \"module-legend-0\",\n      global: \"global-legend\",\n    },\n    3: {\n      local: \"local-legend-0-2\",\n      module: \"module-legend-0\",\n      global: \"global-legend\",\n    },\n    4: {\n      local: \"local-legend-0-2\",\n      module: \"module-legend-0\",\n      global: \"global-legend\",\n    },\n    5: {\n      local: \"local-legend-0-2\",\n      module: \"module-legend-0\",\n      global: \"global-legend\",\n    },\n    6: {\n      local: \"local-legend-1-1\",\n      module: \"module-legend-1\",\n      global: \"global-legend\",\n    },\n    7: {\n      local: \"local-legend-1-1\",\n      module: \"module-legend-1\",\n      global: \"global-legend\",\n    },\n    8: {\n      local: \"local-legend-1-2\",\n      module: \"module-legend-1\",\n      global: \"global-legend\",\n    },\n    9: {\n      local: \"local-legend-1-2\",\n      module: \"module-legend-1\",\n      global: \"global-legend\",\n    },\n    10: {\n      local: \"local-legend-1-2\",\n      module: \"module-legend-1\",\n      global: \"global-legend\",\n    },\n    11: {\n      local: \"output-legend\",\n      module: \"output-legend\",\n      global: \"output-legend\",\n    },\n  };\n\n  let imageOptions = [\n    { file: \"boat_1.jpeg\", class: \"lifeboat\" },\n    { file: \"bug_1.jpeg\", class: \"ladybug\" },\n    { file: \"pizza_1.jpeg\", class: \"pizza\" },\n    { file: \"pepper_1.jpeg\", class: \"bell pepper\" },\n    { file: \"bus_1.jpeg\", class: \"bus\" },\n    { file: \"koala_1.jpeg\", class: \"koala\" },\n    { file: \"espresso_1.jpeg\", class: \"espresso\" },\n    { file: \"panda_1.jpeg\", class: \"red panda\" },\n    { file: \"orange_1.jpeg\", class: \"orange\" },\n    { file: \"car_1.jpeg\", class: \"sport car\" },\n  ];\n  let selectedImage = imageOptions[6].file;\n\n  let nodeData;\n  let selectedNodeIndex = -1;\n  let isExitedFromDetailedView = true;\n  let isExitedFromCollapse = true;\n  let customImageURL = null;\n\n  // Helper functions\n  const selectedScaleLevelChanged = () => {\n    if (svg !== undefined) {\n      if (!scaleLevelSet.add(selectedScaleLevel)) {\n        console.error(\"Encounter unknown scale level!\");\n      }\n\n      // Update nodes and legends\n      if (selectedScaleLevel != previousSelectedScaleLevel) {\n        // We can simply redraw all nodes using the new color scale, or we can\n        // make it faster by only redraw certian nodes\n        let updatingLayerIndexDict = {\n          local: {\n            module: [1, 2, 8, 9, 10],\n            global: [1, 2, 3, 4, 5, 8, 9, 10],\n          },\n          module: {\n            local: [1, 2, 8, 9, 10],\n            global: [1, 2, 3, 4, 5, 8, 9, 10],\n          },\n          global: {\n            local: [1, 2, 3, 4, 5, 8, 9, 10],\n            module: [1, 2, 3, 4, 5],\n          },\n        };\n\n        let updatingLayerIndex =\n          updatingLayerIndexDict[previousSelectedScaleLevel][\n            selectedScaleLevel\n          ];\n\n        updatingLayerIndex.forEach((l) => {\n          let range = cnnLayerRanges[selectedScaleLevel][l];\n          svg\n            .select(`#cnn-layer-group-${l}`)\n            .selectAll(\".node-image\")\n            .each((d, i, g) => drawOutput(d, i, g, range));\n        });\n\n        // Hide previous legend\n        svg\n          .selectAll(`.${previousSelectedScaleLevel}-legend`)\n          .classed(\"hidden\", true);\n\n        // Show selected legends\n        svg\n          .selectAll(`.${selectedScaleLevel}-legend`)\n          .classed(\"hidden\", !detailedMode);\n      }\n      previousSelectedScaleLevel = selectedScaleLevel;\n      selectedScaleLevelStore.set(selectedScaleLevel);\n    }\n  };\n\n  const intermediateNodeMouseOverHandler = (d, i, g) => {\n    if (detailedViewNum !== undefined) {\n      return;\n    }\n    svg.select(`rect#underneath-gateway-${d.index}`).style(\"opacity\", 1);\n  };\n\n  const intermediateNodeMouseLeaveHandler = (d, i, g) => {\n    // screenshot\n    // return;\n    if (detailedViewNum !== undefined) {\n      return;\n    }\n    svg.select(`rect#underneath-gateway-${d.index}`).style(\"opacity\", 0);\n  };\n\n  const intermediateNodeClicked = (d, i, g, selectedI, curLayerIndex) => {\n    d3.event.stopPropagation();\n    isExitedFromCollapse = false;\n    // Use this event to trigger the detailed view\n    if (detailedViewNum === d.index) {\n      // Setting this for testing purposes currently.\n      selectedNodeIndex = -1;\n      // User clicks this node again -> rewind\n      detailedViewNum = undefined;\n      svg.select(`rect#underneath-gateway-${d.index}`).style(\"opacity\", 0);\n    }\n    // We need to show a new detailed view (two cases: if we need to close the\n    // old detailed view or not)\n    else {\n      // Setting this for testing purposes currently.\n      selectedNodeIndex = d.index;\n      let inputMatrix = d.output;\n      let kernelMatrix = d.outputLinks[selectedI].weight;\n      // let interMatrix = singleConv(inputMatrix, kernelMatrix);\n      let colorScale = layerColorScales.conv;\n\n      // Compute the color range\n      let rangePre = cnnLayerRanges[selectedScaleLevel][curLayerIndex - 1];\n      let rangeCur = cnnLayerRanges[selectedScaleLevel][curLayerIndex];\n      let range = Math.max(rangePre, rangeCur);\n\n      // User triggers a different detailed view\n      if (detailedViewNum !== undefined) {\n        // Change the underneath highlight\n        svg\n          .select(`rect#underneath-gateway-${detailedViewNum}`)\n          .style(\"opacity\", 0);\n        svg.select(`rect#underneath-gateway-${d.index}`).style(\"opacity\", 1);\n      }\n\n      // Dynamically position the detail view\n      let wholeSvg = d3.select(\"#cnn-svg\");\n      let svgYMid = +wholeSvg.style(\"height\").replace(\"px\", \"\") / 2;\n      let svgWidth = +wholeSvg.style(\"width\").replace(\"px\", \"\");\n      let detailViewTop = 100 + svgYMid - 250 / 2;\n      let positionX =\n        intermediateLayerPosition[Object.keys(layerIndexDict)[curLayerIndex]];\n\n      let posX = 0;\n      if (curLayerIndex > 6) {\n        posX = (positionX - svgPaddings.left) / 2;\n        posX = svgPaddings.left + posX - 486 / 2;\n      } else {\n        posX = (svgWidth + svgPaddings.right - positionX) / 2;\n        posX = positionX + posX - 486 / 2;\n      }\n\n      // 4.3 更改的部分\n      const detailview = document.getElementById(\"detailview\");\n      detailview.style.top = `${detailViewTop+1999999}px`;\n      detailview.style.left = `${posX}px`;\n      detailview.style.position = \"absolute\";\n\n\n      detailedViewNum = d.index;\n\n      // Send the currently used color range to detailed view\n      nodeData.colorRange = range;\n      nodeData.inputIsInputLayer = curLayerIndex <= 1;\n    }\n  };\n\n  // The order of the if/else statements in this function is very critical\n  const emptySpaceClicked = () => {\n    // If detail view -> rewind to intermediate view\n    if (detailedViewNum !== undefined) {\n      // Setting this for testing purposes currently.\n      selectedNodeIndex = -1;\n      // User clicks this node again -> rewind\n      svg\n        .select(`rect#underneath-gateway-${detailedViewNum}`)\n        .style(\"opacity\", 0);\n      detailedViewNum = undefined;\n    }\n\n    // If softmax view -> rewind to flatten layer view\n    else if (isInSoftmax) {\n      svg.select(\".softmax-symbol\").dispatch(\"click\");\n    }\n\n    // If intermediate view -> rewind to overview\n    else if (isInIntermediateView) {\n      let curLayerIndex = layerIndexDict[selectedNode.layerName];\n      quitIntermediateView(curLayerIndex, selectedNode.domG, selectedNode.domI);\n      d3.select(selectedNode.domG[selectedNode.domI]).dispatch(\"mouseleave\");\n    }\n\n    // If pool/act detail view -> rewind to overview\n    else if (isInActPoolDetailView) {\n      quitActPoolDetailView();\n    }\n  };\n\n  const prepareToEnterIntermediateView = (d, g, i, curLayerIndex) => {\n    isInIntermediateView = true;\n    // Hide all legends\n    svg.selectAll(`.${selectedScaleLevel}-legend`).classed(\"hidden\", true);\n    svg.selectAll(\".input-legend\").classed(\"hidden\", true);\n    svg.selectAll(\".output-legend\").classed(\"hidden\", true);\n\n    // Hide the input annotation\n    svg.select(\".input-annotation\").classed(\"hidden\", true);\n\n    // Highlight the previous layer and this node\n    svg\n      .select(`g#cnn-layer-group-${curLayerIndex - 1}`)\n      .selectAll(\"rect.bounding\")\n      .style(\"stroke-width\", 2);\n\n    d3.select(g[i]).select(\"rect.bounding\").style(\"stroke-width\", 2);\n\n    // Disable control panel UI\n    // d3.select('#level-select').property('disabled', true);\n    // d3.selectAll('.image-container')\n    //   .style('cursor', 'not-allowed')\n    //   .on('mouseclick', () => {});\n    disableControl = true;\n\n    // Allow infinite animation loop\n    shouldIntermediateAnimateStore.set(true);\n\n    // Highlight the labels\n    svg\n      .selectAll(\n        `g#layer-label-${curLayerIndex - 1},\n      g#layer-detailed-label-${curLayerIndex - 1},\n      g#layer-label-${curLayerIndex},\n      g#layer-detailed-label-${curLayerIndex}`\n      )\n      .style(\"font-weight\", \"800\");\n\n    // Register a handler on the svg element so user can click empty space to quit\n    // the intermediate view\n    d3.select(\"#cnn-svg\").on(\"click\", emptySpaceClicked);\n  };\n\n  const quitActPoolDetailView = () => {\n    isInActPoolDetailView = false;\n    actPoolDetailViewNodeIndex = -1;\n\n    let layerIndex = layerIndexDict[selectedNode.layerName];\n    let nodeIndex = selectedNode.index;\n    svg\n      .select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n      .select(\"rect.bounding\")\n      .classed(\"hidden\", true);\n\n    selectedNode.data.inputLinks.forEach((link) => {\n      let layerIndex = layerIndexDict[link.source.layerName];\n      let nodeIndex = link.source.index;\n      svg\n        .select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n        .select(\"rect.bounding\")\n        .classed(\"hidden\", true);\n    });\n\n    // Clean up the underneath rects\n    svg.select(\"g.underneath\").selectAll(\"rect\").remove();\n\n    // Show all edges\n    let unimportantEdges = svg\n      .select(\"g.edge-group\")\n      .selectAll(\".edge\")\n      .filter((d) => {\n        return d.targetLayerIndex !== actPoolDetailViewLayerIndex;\n      })\n      .style(\"visibility\", null);\n\n    // Recover control UI\n    disableControl = false;\n\n    // Show legends if in detailed mode\n    svg\n      .selectAll(`.${selectedScaleLevel}-legend`)\n      .classed(\"hidden\", !detailedMode);\n    svg.selectAll(\".input-legend\").classed(\"hidden\", !detailedMode);\n    svg.selectAll(\".output-legend\").classed(\"hidden\", !detailedMode);\n\n    // Also dehighlight the edge\n    let edgeGroup = svg.select(\"g.cnn-group\").select(\"g.edge-group\");\n    edgeGroup\n      .selectAll(`path.edge-${layerIndex}-${nodeIndex}`)\n      .transition()\n      .ease(d3.easeCubicOut)\n      .duration(200)\n      .style(\"stroke\", edgeInitColor)\n      .style(\"stroke-width\", edgeStrokeWidth)\n      .style(\"opacity\", edgeOpacity);\n\n    // Remove the overlay rect\n    svg\n      .selectAll(\n        \"g.intermediate-layer-overlay, g.intermediate-layer-annotation\"\n      )\n      .transition(\"remove\")\n      .duration(500)\n      .ease(d3.easeCubicInOut)\n      .style(\"opacity\", 0)\n      .on(\"end\", (d, i, g) => {\n        svg\n          .selectAll(\n            \"g.intermediate-layer-overlay, g.intermediate-layer-annotation\"\n          )\n          .remove();\n        svg.selectAll(\"defs.overlay-gradient\").remove();\n        svg.select(\".input-annotation\").classed(\"hidden\", false);\n      });\n\n    // Turn the fade out nodes back\n    svg\n      .select(`g#cnn-layer-group-${layerIndex}`)\n      .selectAll(\"g.node-group\")\n      .each((sd, si, sg) => {\n        d3.select(sg[si]).style(\"pointer-events\", \"all\");\n      });\n\n    svg\n      .select(`g#cnn-layer-group-${layerIndex - 1}`)\n      .selectAll(\"g.node-group\")\n      .each((sd, si, sg) => {\n        // Recover the old events\n        d3.select(sg[si])\n          .style(\"pointer-events\", \"all\")\n          .on(\"mouseover\", nodeMouseOverHandler)\n          .on(\"mouseleave\", nodeMouseLeaveHandler)\n          .on(\"click\", nodeClickHandler);\n      });\n\n    // Deselect the node\n    selectedNode.layerName = \"\";\n    selectedNode.index = -1;\n    selectedNode.data = null;\n\n    actPoolDetailViewLayerIndex = -1;\n  };\n\n  const actPoolDetailViewPreNodeMouseOverHandler = (d, i, g) => {\n    // Highlight the edges\n    let layerIndex = layerIndexDict[d.layerName];\n    let nodeIndex = d.index;\n    let edgeGroup = svg.select(\"g.cnn-group\").select(\"g.edge-group\");\n\n    edgeGroup\n      .selectAll(`path.edge-${actPoolDetailViewLayerIndex}-${nodeIndex}`)\n      .raise()\n      .transition()\n      .ease(d3.easeCubicInOut)\n      .duration(400)\n      .style(\"stroke\", edgeHoverColor)\n      .style(\"stroke-width\", \"1\")\n      .style(\"opacity\", 1);\n\n    // Highlight its border\n    d3.select(g[i]).select(\"rect.bounding\").classed(\"hidden\", false);\n\n    // Highlight node's pair\n    let associatedLayerIndex = layerIndex - 1;\n    if (layerIndex === actPoolDetailViewLayerIndex - 1) {\n      associatedLayerIndex = layerIndex + 1;\n    }\n\n    svg\n      .select(`g#layer-${associatedLayerIndex}-node-${nodeIndex}`)\n      .select(\"rect.bounding\")\n      .classed(\"hidden\", false);\n  };\n\n  const actPoolDetailViewPreNodeMouseLeaveHandler = (d, i, g) => {\n    // De-highlight the edges\n    let layerIndex = layerIndexDict[d.layerName];\n    let nodeIndex = d.index;\n    let edgeGroup = svg.select(\"g.cnn-group\").select(\"g.edge-group\");\n\n    edgeGroup\n      .selectAll(`path.edge-${actPoolDetailViewLayerIndex}-${nodeIndex}`)\n      .transition()\n      .ease(d3.easeCubicOut)\n      .duration(200)\n      .style(\"stroke\", edgeInitColor)\n      .style(\"stroke-width\", edgeStrokeWidth)\n      .style(\"opacity\", edgeOpacity);\n\n    // De-highlight its border\n    d3.select(g[i]).select(\"rect.bounding\").classed(\"hidden\", true);\n\n    // De-highlight node's pair\n    let associatedLayerIndex = layerIndex - 1;\n    if (layerIndex === actPoolDetailViewLayerIndex - 1) {\n      associatedLayerIndex = layerIndex + 1;\n    }\n\n    svg\n      .select(`g#layer-${associatedLayerIndex}-node-${nodeIndex}`)\n      .select(\"rect.bounding\")\n      .classed(\"hidden\", true);\n  };\n\n  const actPoolDetailViewPreNodeClickHandler = (d, i, g) => {\n    let layerIndex = layerIndexDict[d.layerName];\n    let nodeIndex = d.index;\n\n    // Click the pre-layer node in detail view has the same effect as clicking\n    // the cur-layer node, which is to open a new detail view window\n    svg\n      .select(`g#layer-${layerIndex + 1}-node-${nodeIndex}`)\n      .node()\n      .dispatchEvent(new Event(\"click\"));\n  };\n\n  const enterDetailView = (curLayerIndex, i) => {\n    isInActPoolDetailView = true;\n    actPoolDetailViewNodeIndex = i;\n    actPoolDetailViewLayerIndex = curLayerIndex;\n\n    // Dynamically position the detail view\n    let wholeSvg = d3.select(\"#cnn-svg\");\n    let svgYMid = +wholeSvg.style(\"height\").replace(\"px\", \"\") / 2;\n    let svgWidth = +wholeSvg.style(\"width\").replace(\"px\", \"\");\n    let detailViewTop = 5150 + svgYMid - 260 / 2;\n\n    let posX = 0;\n    if (curLayerIndex > 5) {\n      posX = nodeCoordinate[curLayerIndex - 1][0].x + 50;\n      posX = posX / 2 - 500 / 2;\n    } else {\n      posX = (svgWidth - nodeCoordinate[curLayerIndex][0].x - nodeLength) / 2;\n      posX = nodeCoordinate[curLayerIndex][0].x + nodeLength + posX - 500 / 2;\n    }\n\n    const detailview = document.getElementById(\"detailview\");\n    detailview.style.top = `${detailViewTop}px`;\n    detailview.style.left = `${posX}px`;\n    detailview.style.position = \"absolute\";\n\n    // Hide all edges\n    let unimportantEdges = svg\n      .select(\"g.edge-group\")\n      .selectAll(\".edge\")\n      .filter((d) => {\n        return d.targetLayerIndex !== curLayerIndex;\n      })\n      .style(\"visibility\", \"hidden\");\n\n    // Disable UI\n    disableControl = true;\n\n    // Hide input annotaitons\n    svg.select(\".input-annotation\").classed(\"hidden\", true);\n\n    // Hide legends\n    svg.selectAll(`.${selectedScaleLevel}-legend`).classed(\"hidden\", true);\n    svg.selectAll(\".input-legend\").classed(\"hidden\", true);\n    svg.selectAll(\".output-legend\").classed(\"hidden\", true);\n    svg\n      .select(`#${layerLegendDict[curLayerIndex][selectedScaleLevel]}`)\n      .classed(\"hidden\", false);\n\n    // Add overlay rects\n    let leftX = nodeCoordinate[curLayerIndex - 1][i].x;\n    // +5 to cover the detailed mode long label\n    let rightStart = nodeCoordinate[curLayerIndex][i].x + nodeLength + 5;\n\n    // Compute the left and right overlay rect width\n    let rightWidth = width - rightStart - overlayRectOffset / 2;\n    let leftWidth = leftX - nodeCoordinate[0][0].x;\n    \n\n    // The overlay rects should be symmetric\n    if (rightWidth > leftWidth) {\n      let stops = [\n        { offset: \"0%\", color: \"rgb(250, 250, 250)\", opacity: 0.85 },\n        { offset: \"50%\", color: \"rgb(250, 250, 250)\", opacity: 0.9 },\n        { offset: \"100%\", color: \"rgb(250, 250, 250)\", opacity: 1 },\n      ];\n      addOverlayGradient(\"overlay-gradient-right\", stops);\n\n      let leftEndOpacity = 0.85 + (0.95 - 0.85) * (leftWidth / rightWidth);\n      stops = [\n        { offset: \"0%\", color: \"rgb(250, 250, 250)\", opacity: leftEndOpacity },\n        { offset: \"100%\", color: \"rgb(250, 250, 250)\", opacity: 0.85 },\n      ];\n      addOverlayGradient(\"overlay-gradient-left\", stops);\n    } else {\n      let stops = [\n        { offset: \"0%\", color: \"rgb(250, 250, 250)\", opacity: 1 },\n        { offset: \"50%\", color: \"rgb(250, 250, 250)\", opacity: 0.9 },\n        { offset: \"100%\", color: \"rgb(250, 250, 250)\", opacity: 0.85 },\n      ];\n      addOverlayGradient(\"overlay-gradient-left\", stops);\n\n      let rightEndOpacity = 0.85 + (0.95 - 0.85) * (rightWidth / leftWidth);\n      stops = [\n        { offset: \"0%\", color: \"rgb(250, 250, 250)\", opacity: 0.85 },\n        {\n          offset: \"100%\",\n          color: \"rgb(250, 250, 250)\",\n          opacity: rightEndOpacity,\n        },\n      ];\n      addOverlayGradient(\"overlay-gradient-right\", stops);\n    }\n\n    addOverlayRect(\n      \"overlay-gradient-right\",\n      rightStart + overlayRectOffset / 2 + 0.5,\n      0,\n      rightWidth,\n      height + svgPaddings.top\n    );\n\n    addOverlayRect(\n      \"overlay-gradient-left\",\n      nodeCoordinate[0][0].x - overlayRectOffset / 2,\n      0,\n      leftWidth,\n      height + svgPaddings.top\n    );\n\n    svg.selectAll(\"rect.overlay\").on(\"click\", emptySpaceClicked);\n\n    // Add underneath rectangles\n    let underGroup = svg.select(\"g.underneath\");\n    let padding = 7;\n    for (let n = 0; n < cnn[curLayerIndex - 1].length; n++) {\n      underGroup\n        .append(\"rect\")\n        .attr(\"class\", \"underneath-gateway\")\n        .attr(\"id\", `underneath-gateway-${n}`)\n        .attr(\"x\", nodeCoordinate[curLayerIndex - 1][n].x - padding)\n        .attr(\"y\", nodeCoordinate[curLayerIndex - 1][n].y - padding)\n        .attr(\"width\", 2 * nodeLength + hSpaceAroundGap + 2 * padding)\n        .attr(\"height\", nodeLength + 2 * padding)\n        .attr(\"rx\", 10)\n        .style(\"fill\", \"rgba(160, 160, 160, 0.3)\")\n        .style(\"opacity\", 0);\n\n      // Update the event functions for these two layers\n      svg\n        .select(`g#layer-${curLayerIndex - 1}-node-${n}`)\n        .style(\"pointer-events\", \"all\")\n        .style(\"cursor\", \"pointer\")\n        .on(\"mouseover\", actPoolDetailViewPreNodeMouseOverHandler)\n        .on(\"mouseleave\", actPoolDetailViewPreNodeMouseLeaveHandler)\n        .on(\"click\", actPoolDetailViewPreNodeClickHandler);\n    }\n    underGroup.lower();\n\n    // Highlight the selcted pair\n    underGroup.select(`#underneath-gateway-${i}`).style(\"opacity\", 1);\n  };\n\n  const quitIntermediateView = (curLayerIndex, g, i) => {\n    // If it is the softmax detail view, quit that view first\n    if (isInSoftmax) {\n      svg.select(\".logit-layer\").remove();\n      svg.select(\".logit-layer-lower\").remove();\n      svg.selectAll(\".plus-symbol-clone\").remove();\n\n      // Instead of removing the paths, we hide them, so it is faster to load in\n      // the future\n      svg.select(\".underneath\").selectAll(\".logit-lower\").style(\"opacity\", 0);\n\n      softmaxDetailViewStore.set({\n        show: false,\n        logits: [],\n      });\n\n      allowsSoftmaxAnimationStore.set(false);\n    }\n    isInSoftmaxStore.set(false);\n    isInIntermediateView = false;\n\n    // Show the legend\n    svg\n      .selectAll(`.${selectedScaleLevel}-legend`)\n      .classed(\"hidden\", !detailedMode);\n    svg.selectAll(\".input-legend\").classed(\"hidden\", !detailedMode);\n    svg.selectAll(\".output-legend\").classed(\"hidden\", !detailedMode);\n\n    // Recover control panel UI\n    disableControl = false;\n\n    // Recover the input layer node's event\n    for (let n = 0; n < cnn[curLayerIndex - 1].length; n++) {\n      svg\n        .select(`g#layer-${curLayerIndex - 1}-node-${n}`)\n        .on(\"mouseover\", nodeMouseOverHandler)\n        .on(\"mouseleave\", nodeMouseLeaveHandler)\n        .on(\"click\", nodeClickHandler);\n    }\n\n    // Clean up the underneath rects\n    svg.select(\"g.underneath\").selectAll(\"rect\").remove();\n    detailedViewNum = undefined;\n\n    // Highlight the previous layer and this node\n    svg\n      .select(`g#cnn-layer-group-${curLayerIndex - 1}`)\n      .selectAll(\"rect.bounding\")\n      .style(\"stroke-width\", 1);\n\n    d3.select(g[i]).select(\"rect.bounding\").style(\"stroke-width\", 1);\n\n    // Highlight the labels\n    svg\n      .selectAll(\n        `g#layer-label-${curLayerIndex - 1},\n      g#layer-detailed-label-${curLayerIndex - 1},\n      g#layer-label-${curLayerIndex},\n      g#layer-detailed-label-${curLayerIndex}`\n      )\n      .style(\"font-weight\", \"normal\");\n\n    // Also unclick the node\n    // Record the current clicked node\n    selectedNode.layerName = \"\";\n    selectedNode.index = -1;\n    selectedNode.data = null;\n    isExitedFromCollapse = true;\n\n    // Remove the intermediate layer\n    let intermediateLayer = svg.select(\"g.intermediate-layer\");\n\n    // Kill the infinite animation loop\n    shouldIntermediateAnimateStore.set(false);\n\n    intermediateLayer\n      .transition(\"remove\")\n      .duration(500)\n      .ease(d3.easeCubicInOut)\n      .style(\"opacity\", 0)\n      .on(\"end\", (d, i, g) => {\n        d3.select(g[i]).remove();\n      });\n\n    // Remove the output node overlay mask\n    svg.selectAll(\".overlay-group\").remove();\n\n    // Remove the overlay rect\n    svg\n      .selectAll(\n        \"g.intermediate-layer-overlay, g.intermediate-layer-annotation\"\n      )\n      .transition(\"remove\")\n      .duration(500)\n      .ease(d3.easeCubicInOut)\n      .style(\"opacity\", 0)\n      .on(\"end\", (d, i, g) => {\n        svg\n          .selectAll(\n            \"g.intermediate-layer-overlay, g.intermediate-layer-annotation\"\n          )\n          .remove();\n        svg.selectAll(\"defs.overlay-gradient\").remove();\n      });\n\n    // Recover the layer if we have drdrawn it\n    if (needRedraw[0] !== undefined) {\n      let redrawRange = cnnLayerRanges[selectedScaleLevel][needRedraw[0]];\n      if (needRedraw[1] !== undefined) {\n        svg\n          .select(`g#layer-${needRedraw[0]}-node-${needRedraw[1]}`)\n          .select(\"image.node-image\")\n          .each((d, i, g) => drawOutput(d, i, g, redrawRange));\n      } else {\n        svg\n          .select(`g#cnn-layer-group-${needRedraw[0]}`)\n          .selectAll(\"image.node-image\")\n          .each((d, i, g) => drawOutput(d, i, g, redrawRange));\n      }\n    }\n\n    // Move all layers to their original place\n    for (let i = 0; i < numLayers; i++) {\n      moveLayerX({\n        layerIndex: i,\n        targetX: nodeCoordinate[i][0].x,\n        disable: false,\n        delay: 500,\n        opacity: 1,\n      });\n    }\n\n    moveLayerX({\n      layerIndex: numLayers - 2,\n      targetX: nodeCoordinate[numLayers - 2][0].x,\n      opacity: 1,\n      disable: false,\n      delay: 500,\n      onEndFunc: () => {\n        // Show all edges on the last moving animation end\n        svg.select(\"g.edge-group\").style(\"visibility\", \"visible\");\n\n        // Recover the input annotation\n        svg.select(\".input-annotation\").classed(\"hidden\", false);\n      },\n    });\n  };\n\n  const nodeClickHandler = (d, i, g) => {\n    d3.event.stopPropagation();\n    let nodeIndex = d.index;\n\n    // Record the current clicked node\n    selectedNode.layerName = d.layerName;\n    selectedNode.index = d.index;\n    selectedNode.data = d;\n    selectedNode.domI = i;\n    selectedNode.domG = g;\n\n    // Record data for detailed view.\n    if (d.type === \"conv\" || d.type === \"relu\" || d.type === \"pool\") {\n      let data = [];\n      for (let j = 0; j < d.inputLinks.length; j++) {\n        data.push({\n          input: d.inputLinks[j].source.output,\n          kernel: d.inputLinks[j].weight,\n          output: d.inputLinks[j].dest.output,\n        });\n      }\n      let curLayerIndex = layerIndexDict[d.layerName];\n      data.colorRange = cnnLayerRanges[selectedScaleLevel][curLayerIndex];\n      data.isInputInputLayer = curLayerIndex <= 1;\n      nodeData = data;\n    }\n\n    let curLayerIndex = layerIndexDict[d.layerName];\n\n    if (d.type == \"relu\" || d.type == \"pool\") {\n      isExitedFromDetailedView = false;\n      if (!isInActPoolDetailView) {\n        // Enter the act pool detail view\n        enterDetailView(curLayerIndex, d.index);\n      } else {\n        if (d.index === actPoolDetailViewNodeIndex) {\n          // Quit the act pool detail view\n          quitActPoolDetailView();\n        } else {\n          // Switch the detail view input to the new clicked pair\n\n          // Remove the previous selection effect\n          svg\n            .select(\n              `g#layer-${curLayerIndex}-node-${actPoolDetailViewNodeIndex}`\n            )\n            .select(\"rect.bounding\")\n            .classed(\"hidden\", true);\n\n          svg\n            .select(\n              `g#layer-${curLayerIndex - 1}-node-${actPoolDetailViewNodeIndex}`\n            )\n            .select(\"rect.bounding\")\n            .classed(\"hidden\", true);\n\n          let edgeGroup = svg.select(\"g.cnn-group\").select(\"g.edge-group\");\n\n          edgeGroup\n            .selectAll(\n              `path.edge-${curLayerIndex}-${actPoolDetailViewNodeIndex}`\n            )\n            .transition()\n            .ease(d3.easeCubicOut)\n            .duration(200)\n            .style(\"stroke\", edgeInitColor)\n            .style(\"stroke-width\", edgeStrokeWidth)\n            .style(\"opacity\", edgeOpacity);\n\n          let underGroup = svg.select(\"g.underneath\");\n          underGroup\n            .select(`#underneath-gateway-${actPoolDetailViewNodeIndex}`)\n            .style(\"opacity\", 0);\n\n          // Add selection effect on the new selected pair\n          svg\n            .select(`g#layer-${curLayerIndex}-node-${nodeIndex}`)\n            .select(\"rect.bounding\")\n            .classed(\"hidden\", false);\n\n          svg\n            .select(`g#layer-${curLayerIndex - 1}-node-${nodeIndex}`)\n            .select(\"rect.bounding\")\n            .classed(\"hidden\", false);\n\n          edgeGroup\n            .selectAll(`path.edge-${curLayerIndex}-${nodeIndex}`)\n            .raise()\n            .transition()\n            .ease(d3.easeCubicInOut)\n            .duration(400)\n            .style(\"stroke\", edgeHoverColor)\n            .style(\"stroke-width\", \"1\")\n            .style(\"opacity\", 1);\n\n          underGroup\n            .select(`#underneath-gateway-${nodeIndex}`)\n            .style(\"opacity\", 1);\n\n          actPoolDetailViewNodeIndex = nodeIndex;\n        }\n      }\n    }\n\n    // Enter the second view (layer-view) when user clicks a conv node\n    if (\n      (d.type === \"conv\" || d.layerName === \"output\") &&\n      !isInIntermediateView\n    ) {\n      prepareToEnterIntermediateView(d, g, nodeIndex, curLayerIndex);\n\n      if (d.layerName === \"conv_1_1\") {\n        drawConv1(\n          curLayerIndex,\n          d,\n          nodeIndex,\n          width,\n          height,\n          intermediateNodeMouseOverHandler,\n          intermediateNodeMouseLeaveHandler,\n          intermediateNodeClicked\n        );\n      } else if (d.layerName === \"conv_1_2\") {\n        drawConv2(\n          curLayerIndex,\n          d,\n          nodeIndex,\n          width,\n          height,\n          intermediateNodeMouseOverHandler,\n          intermediateNodeMouseLeaveHandler,\n          intermediateNodeClicked\n        );\n      } else if (d.layerName === \"conv_2_1\") {\n        drawConv3(\n          curLayerIndex,\n          d,\n          nodeIndex,\n          width,\n          height,\n          intermediateNodeMouseOverHandler,\n          intermediateNodeMouseLeaveHandler,\n          intermediateNodeClicked\n        );\n      } else if (d.layerName === \"conv_2_2\") {\n        drawConv4(\n          curLayerIndex,\n          d,\n          nodeIndex,\n          width,\n          height,\n          intermediateNodeMouseOverHandler,\n          intermediateNodeMouseLeaveHandler,\n          intermediateNodeClicked\n        );\n      } else if (d.layerName === \"output\") {\n        drawFlatten(curLayerIndex, d, nodeIndex, width, height);\n      }\n    }\n    // Quit the layerview\n    else if (\n      (d.type === \"conv\" || d.layerName === \"output\") &&\n      isInIntermediateView\n    ) {\n      quitIntermediateView(curLayerIndex, g, i);\n    }\n  };\n\n  const nodeMouseOverHandler = (d, i, g) => {\n    // if (isInIntermediateView || isInActPoolDetailView) { return; }\n    if (isInIntermediateView) {\n      return;\n    }\n\n    // Highlight the edges\n    let layerIndex = layerIndexDict[d.layerName];\n    let nodeIndex = d.index;\n    let edgeGroup = svg.select(\"g.cnn-group\").select(\"g.edge-group\");\n\n    edgeGroup\n      .selectAll(`path.edge-${layerIndex}-${nodeIndex}`)\n      .raise()\n      .transition()\n      .ease(d3.easeCubicInOut)\n      .duration(400)\n      .style(\"stroke\", edgeHoverColor)\n      .style(\"stroke-width\", \"1\")\n      .style(\"opacity\", 1);\n\n    // Highlight its border\n    d3.select(g[i]).select(\"rect.bounding\").classed(\"hidden\", false);\n\n    // Highlight source's border\n    if (d.inputLinks.length === 1) {\n      let link = d.inputLinks[0];\n      let layerIndex = layerIndexDict[link.source.layerName];\n      let nodeIndex = link.source.index;\n      svg\n        .select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n        .select(\"rect.bounding\")\n        .classed(\"hidden\", false);\n    } else {\n      svg\n        .select(`g#cnn-layer-group-${layerIndex - 1}`)\n        .selectAll(\"g.node-group\")\n        .selectAll(\"rect.bounding\")\n        .classed(\"hidden\", false);\n    }\n\n    // Highlight the output text\n    if (d.layerName === \"output\") {\n      d3.select(g[i])\n        .select(\".output-text\")\n        .style(\"opacity\", 0.8)\n        .style(\"text-decoration\", \"underline\");\n    }\n\n    /* Use the following commented code if we have non-linear model\n    d.inputLinks.forEach(link => {\n      let layerIndex = layerIndexDict[link.source.layerName];\n      let nodeIndex = link.source.index;\n      svg.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n        .select('rect.bounding')\n        .classed('hidden', false);\n    });\n    */\n  };\n\n  const nodeMouseLeaveHandler = (d, i, g) => {\n    // Screenshot\n    // return;\n\n    if (isInIntermediateView) {\n      return;\n    }\n\n    // Keep the highlight if user has clicked\n    if (\n      isInActPoolDetailView ||\n      d.layerName !== selectedNode.layerName ||\n      d.index !== selectedNode.index\n    ) {\n      let layerIndex = layerIndexDict[d.layerName];\n      let nodeIndex = d.index;\n      let edgeGroup = svg.select(\"g.cnn-group\").select(\"g.edge-group\");\n\n      edgeGroup\n        .selectAll(`path.edge-${layerIndex}-${nodeIndex}`)\n        .transition()\n        .ease(d3.easeCubicOut)\n        .duration(200)\n        .style(\"stroke\", edgeInitColor)\n        .style(\"stroke-width\", edgeStrokeWidth)\n        .style(\"opacity\", edgeOpacity);\n\n      d3.select(g[i]).select(\"rect.bounding\").classed(\"hidden\", true);\n\n      if (d.inputLinks.length === 1) {\n        let link = d.inputLinks[0];\n        let layerIndex = layerIndexDict[link.source.layerName];\n        let nodeIndex = link.source.index;\n        svg\n          .select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n          .select(\"rect.bounding\")\n          .classed(\"hidden\", true);\n      } else {\n        svg\n          .select(`g#cnn-layer-group-${layerIndex - 1}`)\n          .selectAll(\"g.node-group\")\n          .selectAll(\"rect.bounding\")\n          .classed(\n            \"hidden\",\n            (d) =>\n              d.layerName !== selectedNode.layerName ||\n              d.index !== selectedNode.index\n          );\n      }\n\n      // Dehighlight the output text\n      if (d.layerName === \"output\") {\n        d3.select(g[i])\n          .select(\".output-text\")\n          .style(\"fill\", \"black\")\n          .style(\"opacity\", 0.5)\n          .style(\"text-decoration\", \"none\");\n      }\n\n      /* Use the following commented code if we have non-linear model\n      d.inputLinks.forEach(link => {\n        let layerIndex = layerIndexDict[link.source.layerName];\n        let nodeIndex = link.source.index;\n        svg.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n          .select('rect.bounding')\n          .classed('hidden', true);\n      });\n      */\n    }\n  };\n  let logits = [-4.28, 2.96, -0.38, 5.24, -7.56, -3.43, 8.63, 2.63, 6.3, 0.68];\n  let selectedI = 4;\n\n  onMount(async () => {\n    // Create SVG\n    wholeSvg = d3.select(overviewComponent).select(\"#cnn-svg\");\n    svg = wholeSvg\n      .append(\"g\")\n      .attr(\"class\", \"main-svg\")\n      .attr(\"transform\", `translate(${svgPaddings.left}, 0)`);\n    svgStore.set(svg);\n\n    width =\n      Number(wholeSvg.style(\"width\").replace(\"px\", \"\")) -\n      svgPaddings.left -\n      svgPaddings.right;\n    height =\n      Number(wholeSvg.style(\"height\").replace(\"px\", \"\")) -\n      svgPaddings.top -\n      svgPaddings.bottom;\n\n    let cnnGroup = svg.append(\"g\").attr(\"class\", \"cnn-group\");\n\n    let underGroup = svg.append(\"g\").attr(\"class\", \"underneath\");\n\n    let svgYMid = +wholeSvg.style(\"height\").replace(\"px\", \"\") / 2;\n    detailedViewAbsCoords = {\n      1: [600, 100 + svgYMid - 220 / 2, 490, 290],\n      2: [500, 100 + svgYMid - 220 / 2, 490, 290],\n      3: [700, 100 + svgYMid - 220 / 2, 490, 290],\n      4: [600, 100 + svgYMid - 220 / 2, 490, 290],\n      5: [650, 100 + svgYMid - 220 / 2, 490, 290],\n      6: [850, 100 + svgYMid - 220 / 2, 490, 290],\n      7: [100, 100 + svgYMid - 220 / 2, 490, 290],\n      8: [60, 100 + svgYMid - 220 / 2, 490, 290],\n      9: [200, 100 + svgYMid - 220 / 2, 490, 290],\n      10: [300, 100 + svgYMid - 220 / 2, 490, 290],\n    };\n\n    // Define global arrow marker end\n    svg\n      .append(\"defs\")\n      .append(\"marker\")\n      .attr(\"id\", \"marker\")\n      .attr(\"viewBox\", \"0 -5 10 10\")\n      .attr(\"refX\", 6)\n      .attr(\"refY\", 0)\n      .attr(\"markerWidth\", 6)\n      .attr(\"markerHeight\", 6)\n      .attr(\"orient\", \"auto\")\n      .append(\"path\")\n      .style(\"stroke-width\", 1.2)\n      .style(\"fill\", \"gray\")\n      .style(\"stroke\", \"gray\")\n      .attr(\"d\", \"M0,-5L10,0L0,5\");\n\n    // Alternative arrow head style for non-interactive annotation\n    svg\n      .append(\"defs\")\n      .append(\"marker\")\n      .attr(\"id\", \"marker-alt\")\n      .attr(\"viewBox\", \"0 -5 10 10\")\n      .attr(\"refX\", 6)\n      .attr(\"refY\", 0)\n      .attr(\"markerWidth\", 6)\n      .attr(\"markerHeight\", 6)\n      .attr(\"orient\", \"auto\")\n      .append(\"path\")\n      .style(\"fill\", \"none\")\n      .style(\"stroke\", \"gray\")\n      .style(\"stroke-width\", 2)\n      .attr(\"d\", \"M-5,-10L10,0L-5,10\");\n\n    console.time(\"Construct cnn\");\n    model = await loadTrainedModel(\"PUBLIC_URL/assets/data/model.json\");\n    cnn = await constructCNN(`PUBLIC_URL/assets/img/${selectedImage}`, model);\n    console.timeEnd(\"Construct cnn\");\n    cnnStore.set(cnn);\n\n    // Ignore the flatten layer for now\n    let flatten = cnn[cnn.length - 2];\n    cnn.splice(cnn.length - 2, 1);\n    cnn.flatten = flatten;\n    console.log(cnn);\n\n    updateCNNLayerRanges();\n\n    // Create and draw the CNN view\n    drawCNN(\n      width,\n      height,\n      cnnGroup,\n      nodeMouseOverHandler,\n      nodeMouseLeaveHandler,\n      nodeClickHandler\n    );\n  });\n\n  const detailedButtonClicked = () => {\n    detailedMode = !detailedMode;\n    detailedModeStore.set(detailedMode);\n\n    if (!isInIntermediateView) {\n      // Show the legend\n      svg\n        .selectAll(`.${selectedScaleLevel}-legend`)\n        .classed(\"hidden\", !detailedMode);\n\n      svg.selectAll(\".input-legend\").classed(\"hidden\", !detailedMode);\n      svg.selectAll(\".output-legend\").classed(\"hidden\", !detailedMode);\n    }\n\n    // Switch the layer name\n    svg.selectAll(\".layer-detailed-label\").classed(\"hidden\", !detailedMode);\n\n    svg.selectAll(\".layer-label\").classed(\"hidden\", detailedMode);\n  };\n\n  const imageOptionClicked = async (e) => {\n    let newImageName = d3.select(e.target).attr(\"data-imageName\");\n\n    if (newImageName !== selectedImage) {\n      selectedImage = newImageName;\n\n      // Re-compute the CNN using the new input image\n      cnn = await constructCNN(`PUBLIC_URL/assets/img/${selectedImage}`, model);\n\n      // Ignore the flatten layer for now\n      let flatten = cnn[cnn.length - 2];\n      cnn.splice(cnn.length - 2, 1);\n      cnn.flatten = flatten;\n      cnnStore.set(cnn);\n\n      // Update all scales used in the CNN view\n      updateCNNLayerRanges();\n      updateCNN();\n    }\n  };\n\n  const customImageClicked = () => {\n    // Case 1: there is no custom image -> show the modal to get user input\n    if (customImageURL === null) {\n      modalInfo.show = true;\n      modalInfo.preImage = selectedImage;\n      modalStore.set(modalInfo);\n    }\n\n    // Case 2: there is an existing custom image, not the focus -> switch to this image\n    else if (selectedImage !== \"custom\") {\n      let fakeEvent = { detail: { url: customImageURL } };\n      handleCustomImage(fakeEvent);\n    }\n\n    // Case 3: there is an existing custom image, and its the focus -> let user\n    // upload a new image\n    else {\n      modalInfo.show = true;\n      modalInfo.preImage = selectedImage;\n      modalStore.set(modalInfo);\n    }\n\n    if (selectedImage !== \"custom\") {\n      selectedImage = \"custom\";\n    }\n  };\n\n  const handleModalCanceled = (event) => {\n    // User cancels the modal without a successful image, so we restore the\n    // previous selected image as input\n    selectedImage = event.detail.preImage;\n  };\n\n  const handleCustomImage = async (event) => {\n    // User gives a valid image URL\n    customImageURL = event.detail.url;\n\n    // Re-compute the CNN using the new input image\n    cnn = await constructCNN(customImageURL, model);\n\n    // Ignore the flatten layer for now\n    let flatten = cnn[cnn.length - 2];\n    cnn.splice(cnn.length - 2, 1);\n    cnn.flatten = flatten;\n    cnnStore.set(cnn);\n\n    // Update the UI\n    let customImageSlot = d3\n      .select(overviewComponent)\n      .select(\".custom-image\")\n      .node();\n    drawCustomImage(customImageSlot, cnn[0]);\n\n    // Update all scales used in the CNN view\n    updateCNNLayerRanges();\n    updateCNN();\n  };\n\n  function handleExitFromDetiledConvView(event) {\n    if (event.detail.text) {\n      detailedViewNum = undefined;\n      svg\n        .select(`rect#underneath-gateway-${selectedNodeIndex}`)\n        .style(\"opacity\", 0);\n      selectedNodeIndex = -1;\n    }\n  }\n\n  function handleExitFromDetiledPoolView(event) {\n    if (event.detail.text) {\n      quitActPoolDetailView();\n      isExitedFromDetailedView = true;\n    }\n  }\n\n  function handleExitFromDetiledActivationView(event) {\n    if (event.detail.text) {\n      quitActPoolDetailView();\n      isExitedFromDetailedView = true;\n    }\n  }\n\n  function handleExitFromDetiledSoftmaxView(event) {\n    softmaxDetailViewInfo.show = false;\n    softmaxDetailViewStore.set(softmaxDetailViewInfo);\n  }\n</script>\n\n<Article />\n\n\n<div class=\"overview\" bind:this={overviewComponent}>\n  <div class=\"control-container\">\n    <div class=\"left-control\">\n      {#each imageOptions as image, i}\n        <div\n          class=\"image-container\"\n          on:click={disableControl ? () => {} : imageOptionClicked}\n          class:inactive={selectedImage !== image.file}\n          class:disabled={disableControl}\n          data-imageName={image.file}\n        >\n          <!-- svelte-ignore a11y-img-redundant-alt -->\n          <img\n            src=\"PUBLIC_URL/assets/img/{image.file}\"\n            alt=\"image option\"\n            title={image.class}\n            data-imageName={image.file}\n          />\n        </div>\n      {/each}\n\n      <!-- The plus button -->\n      <div\n        class=\"image-container\"\n        class:inactive={selectedImage !== \"custom\"}\n        class:disabled={disableControl}\n        data-imageName={\"custom\"}\n        on:click={disableControl ? () => {} : customImageClicked}\n      >\n        <img\n          class=\"custom-image\"\n          src=\"PUBLIC_URL/assets/img/plus.svg\"\n          alt=\"plus button\"\n          title=\"Add new input image\"\n          data-imageName=\"custom\"\n        />\n\n        <span class=\"fa-stack edit-icon\" class:hidden={customImageURL === null}>\n          <i class=\"fas fa-circle fa-stack-2x\" />\n          <i class=\"fas fa-pen fa-stack-1x fa-inverse\" />\n        </span>\n      </div>\n\n      <button\n        class=\"button is-very-small is-link is-light\"\n        id=\"hover-label\"\n        style=\"opacity:{hoverInfo.show ? 1 : 0}\"\n      >\n        <span class=\"icon\" style=\"margin-right: 5px;\">\n          <i class=\"fas fa-crosshairs \" />\n        </span>\n        <span id=\"hover-label-text\">\n          {hoverInfo.text}\n        </span>\n      </button>\n    </div>\n\n    <div class=\"right-control\">\n      <button\n        class=\"button is-very-small\"\n        id=\"detailed-button\"\n        disabled={disableControl}\n        class:is-activated={detailedMode}\n        on:click={detailedButtonClicked}\n      >\n        <span class=\"icon\">\n          <i class=\"fas fa-eye\" />\n        </span>\n        <span id=\"hover-label-text\"> Show detail </span>\n      </button>\n\n      <div\n        class=\"control is-very-small has-icons-left\"\n        title=\"Change color scale range\"\n      >\n        <span class=\"icon is-left\">\n          <i class=\"fas fa-palette\" />\n        </span>\n\n        <div class=\"select\">\n          <select\n            bind:value={selectedScaleLevel}\n            id=\"level-select\"\n            disabled={disableControl}\n          >\n            <option value=\"local\">Unit</option>\n            <option value=\"module\">Module</option>\n            <option value=\"global\">Global</option>\n          </select>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"cnn\">\n    <svg id=\"cnn-svg\" />\n  </div>\n</div>\n\n<!-- article 原位 -->\n<OtherHalf />\n\n\n<!-- 小方块-->\n<div id=\"detailview\">\n  {#if selectedNode.data && selectedNode.data.type === \"conv\" && selectedNodeIndex != -1}\n    <ConvolutionView\n      on:message={handleExitFromDetiledConvView}\n      input={nodeData[selectedNodeIndex].input}\n      kernel={nodeData[selectedNodeIndex].kernel}\n      dataRange={nodeData.colorRange}\n      colorScale={nodeData.inputIsInputLayer\n        ? layerColorScales.input[0]\n        : layerColorScales.conv}\n      isInputInputLayer={nodeData.inputIsInputLayer}\n      isExited={isExitedFromCollapse}\n    />\n  {:else if selectedNode.data && selectedNode.data.type === \"relu\"}\n    <ActivationView\n      on:message={handleExitFromDetiledActivationView}\n      input={nodeData[0].input}\n      output={nodeData[0].output}\n      dataRange={nodeData.colorRange}\n      isExited={isExitedFromDetailedView}\n    />\n  {:else if selectedNode.data && selectedNode.data.type === \"pool\"}\n    <PoolView\n      on:message={handleExitFromDetiledPoolView}\n      input={nodeData[0].input}\n      kernelLength={2}\n      dataRange={nodeData.colorRange}\n      isExited={isExitedFromDetailedView}\n    />\n  {:else if softmaxDetailViewInfo.show}\n    <SoftmaxView\n      logits={softmaxDetailViewInfo.logits}\n      logitColors={softmaxDetailViewInfo.logitColors}\n      selectedI={softmaxDetailViewInfo.selectedI}\n      highlightI={softmaxDetailViewInfo.highlightI}\n      outputName={softmaxDetailViewInfo.outputName}\n      outputValue={softmaxDetailViewInfo.outputValue}\n      startAnimation={softmaxDetailViewInfo.startAnimation}\n      on:xClicked={handleExitFromDetiledSoftmaxView}\n      on:mouseOver={softmaxDetailViewMouseOverHandler}\n      on:mouseLeave={softmaxDetailViewMouseLeaveHandler}\n    />\n  {/if}\n</div>\n\n\n\n<Modal on:xClicked={handleModalCanceled} on:urlTyped={handleCustomImage} />\n\n<style>\n  .overview {\n    padding: 0;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: flex-start;\n  }\n\n  .control-container {\n    padding: 0px 20px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n  }\n\n  .right-control {\n    display: flex;\n  }\n\n  .left-control {\n    display: flex;\n    align-items: center;\n  }\n\n  .control > .select > #level-select {\n    padding-left: 2em;\n    padding-right: 2em;\n    \n  }\n\n  .cnn {\n    width: 100%;\n    padding: 0;\n    background: var(--light-gray);\n    display: flex;\n  }\n\n  svg {\n    margin: 0 auto;\n    min-height: 490px;\n    max-height: 700px;\n    height: calc(100vh - 100px);\n    width: 100vw;\n  }\n\n  .is-very-small {\n    font-size: 12px;\n  }\n\n  #detailed-button {\n    margin-right: 10px;\n    color: #dbdbdb;\n    transition: border-color 300ms ease-in-out, color 200ms ease-in-out;\n  }\n\n  #detailed-button.is-activated,\n  #detailed-button.is-activated:hover {\n    color: #3273dc;\n    border-color: #3273dc;\n  }\n\n  #detailed-button:hover {\n    color: #b5b5b5;\n  }\n\n  #hover-label {\n    transition: opacity 300ms ease-in-out;\n    text-overflow: ellipsis;\n    pointer-events: none;\n    margin-left: 5px;\n    \n  }\n\n  .image-container {\n    width: 40px;\n    height: 40px;\n    border-radius: 4px;\n    display: inline-block;\n    position: relative;\n    border: 2.5px solid #1e1e1e;\n    margin-right: 10px;\n    cursor: pointer;\n    pointer-events: all;\n    transition: border 300ms ease-in-out;\n  }\n\n  .image-container img {\n    object-fit: cover;\n    max-width: 100%;\n    max-height: 100%;\n    z-index: -1;\n    transition: opacity 300ms ease-in-out;\n  }\n\n  .image-container.inactive {\n    border: 2.5px solid rgb(220, 220, 220);\n  }\n\n  .image-container.inactive > img {\n    opacity: 0.3;\n  }\n\n  .image-container.inactive:hover > img {\n    opacity: 0.6;\n  }\n\n  .image-container.inactive.disabled {\n    border: 2.5px solid rgb(220, 220, 220);\n    cursor: not-allowed;\n  }\n\n  .image-container.inactive.disabled:hover {\n    border: 2.5px solid rgb(220, 220, 220);\n    cursor: not-allowed;\n  }\n\n  .image-container.inactive.disabled > img {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n\n  .image-container.inactive.disabled:hover > img {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n\n  .image-container.inactive > .edit-icon {\n    color: #bababa;\n  }\n\n  .image-container.inactive:hover > .edit-icon {\n    color: #777777;\n  }\n\n  .image-container.inactive:hover {\n    border: 2.5px solid #1e1e1e;\n  }\n\n  .edit-icon {\n    position: absolute;\n    bottom: -6px;\n    right: -7px;\n    font-size: 7px;\n    color: #1e1e1e;\n    transition: color 300ms ease-in-out;\n  }\n\n  :global(canvas) {\n    image-rendering: crisp-edges;\n  }\n\n  :global(.layer-label),\n  :global(.layer-detailed-label),\n  :global(.layer-intermediate-label) {\n    font-size: 12px;\n    opacity: 0.8;\n    text-anchor: middle;\n  }\n\n  :global(.colorLegend) {\n    font-size: 10px;\n  }\n\n  :global(.legend) {\n    transition: opacity 400ms ease-in-out;\n  }\n\n  :global(.legend > rect) {\n    opacity: 1;\n  }\n\n  :global(.legend text),\n  :global(.legend line),\n  :global(.legend path) {\n    opacity: 0.7;\n  }\n\n  :global(.legend#output-legend > rect) {\n    opacity: 1;\n  }\n\n  :global(.hidden) {\n    opacity: 0;\n    pointer-events: none;\n  }\n\n  :global(.very-strong) {\n    stroke-width: 3px;\n  }\n\n  :global(.bounding),\n  :global(.edge),\n  :global(.edge-group),\n  :global(foreignObject),\n  :global(.bounding-flatten),\n  :global(.underneath-gateway),\n  :global(.input-annotation) {\n    transition: opacity 300ms ease-in-out;\n  }\n\n  :global(rect.bounding) {\n    transition: stroke-width 800ms ease-in-out, opacity 300ms ease-in-out;\n  }\n\n  :global(.annotation-text) {\n    pointer-events: none;\n    font-size: 10px;\n    font-style: italic;\n    fill: gray;\n  }\n\n  /* Change the cursor style on the detailed view input and output matrices */\n  :global(rect.square) {\n    cursor: crosshair;\n  }\n\n  :global(.animation-control-button) {\n    font-family: FontAwesome;\n    opacity: 0.8;\n    cursor: pointer;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}
